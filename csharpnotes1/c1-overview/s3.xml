<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section SYSTEM "../csharpnotes1.dtd" >

<section id="overview.3" title="The Common Language Runtime">
    
<p><start><big>M</big>achine language consists</start> of very simple
instructions that can be executed directly by the CPU of a computer. Almost all
programs, though, are written in <newword>high-level programming languages</newword> 
such as C#, Java, Python, or C++. A program written in a
high-level language cannot be run directly on any computer. First, it has to be
translated into machine language. This translation can be done by a program
called a <newword>compiler</newword>. A compiler takes a
high-level-language program and translates it into an executable
machine-language program. Once the translation is done, the machine-language
program can be run any number of times, but of course it can only be run on one
type of computer, since each type of computer has its own individual machine
language.
If the program is to run on another type of computer it has to be
re-translated, using a different compiler, into the appropriate machine
language.</p>

<p>There is an alternative to compiling a high-level language program. Instead
of using a compiler, which translates the program all at once, you can use an
<newword>interpreter</newword>, which translates it
instruction-by-instruction, as necessary. An interpreter is a program that acts
much like a CPU, with a kind of fetch-and-execute cycle. In order to execute a
program, the interpreter runs in a loop in which it repeatedly reads one
instruction from the program, decides what is necessary to carry out that
instruction, and then performs the appropriate machine-language commands to do
so.</p>

<p>(A compiler is like a human translator who translates an entire book from
one language to another, producing a new book in the second language.
An interpreter is more like a human interpreter who translates a speech at
the United Nations from one language to another at the same time that
the speech is being given.)</p>

<break/>

<p>The designers of C# chose to use a two-step compilation process.
Programs written in C# are first compiled into machine language,
but it is a machine language for a computer that doesn't really exist. This
"intermediate" machine language is known as <newword>Intermediate Language</newword>, or IL.
It is sometimes also called Common Intermediate Language (CIL), or sometimes Microsoft Intermediate Language (MSIL).
Then at runtime, on an as-needed basis, this IL is converted to the machine
language of the target system by the <newword>Just in Time Compiler</newword>,
or JIT, which is part of the <newword>Common Language Runtime</newword>, or CLR.
Because it is compiled and not interpreted, the performance of C# programs can
often be as good as programs written in purely compiled languages, such as C++.
</p>

<p>Since IL is independent of any specific type of computer,
many compiled .NET programs are able to execute on any computer that has a .NET CLR,
because the CLR's JIT handles the translation of IL to the machine language of the target computer.
.NET programs can run on a variety of computer architectures such as x86 and ARM,
as well as a variety of operating systems, such as Windows, macOS, Linux, Android, and iOS.
</p>

<img height="208" width="530" src="overview-fig3.png" tex="overview-fig3.eps" texscale="0.8" bordered="true"/>

<p>Why, you might wonder, use IL at all? Why not
just distribute the original C# program and let each person compile it into
the machine language of whatever computer they want to run it on? There are
several reasons. First of all, a compiler has to understand C#, a complex
high-level language. The C# compiler is itself a complex program. The JIT
Compiler, on the other hand, is a relatively small, simple program. This makes
it easier to write a CLR for a new type of computer; once that
is done, that computer can run any compiled .NET program. It would be much
harder to write specific C# compilers for every computer architecture where .NET can run.</p>

<p>Why use a Just in Time Compiler instead of a regular interpreter? The JIT
translates .NET IL into native machine language.  It does
this while it is executing the program.  Just as for a normal interpreter,
the input to the JIT is an IL program, and its task
is to execute that program.  But as it is executing the program, it also
translates parts of it into the native machine language.  The translated parts of the
program can then be executed much more quickly than they could be interpreted.
Since a given part of a program is often executed many times as the program
runs, the JIT can significantly speed up the overall 
execution time,
because it does not have to repeatedly re-interpret portions of the program that are executed multiple times.
</p>

</section>