<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section SYSTEM "../csharpnotes1.dtd" >

<section id="GUI2.1" title="Properties and Bindings">
   
<p><start><big>W</big>e have seen that GUI programming</start> makes heavy
use of events, including low-level mouse and keyboard events and higher-level
events such as those that are generated when the user makes a menu selection
or adjusts the value of a slider.  In <localref href="GUI1.4.6"/>, we saw that
events from a slider actually come from an "observable property" of the slider.
That is, in order to respond to changes in the value of a <classname>Slider</classname>,
<code>sldr</code>, you need to register a listener with the <code>valueProperty</code>
of the slider:</p>
   
<pre>sldr.valueProperty().addListener( . . . );</pre>

<np>When the value of the slider changes, its <code>valueProperty</code> emits
an event that allows your event-handling code to respond to the change.</np>

<p>In fact, the value property of a slider is an object of type
<classname>DoubleProperty</classname>.  A <classname>DoubleProperty</classname>
has several aspects.  First of all, it wraps a value of type <ptype>double</ptype>,
and it has methods <code>get()</code> and <code>set()</code> for retrieving and
changing that value. Second, it is an "observable value," which means that it emits
events when the <ptype>double</ptype> value is changed.  Third, it is a 
"bindable property," an aspect that is possibly unique to JavaFX.  A bindable
property can be bound to another property of the same type.  Properties that
are bound in this way are forced to have the same value.  Bindable
properties are used throughout the JavaFX API.  This section explores how
and why they are used. </p>
    
<p>The classes discussed in this section are defined in package <code>javafx.beans</code>
and its subpackages.  However, you will rarely need to import classes from those packages
into your JavaFX programs, since you will mostly be using objects that already exist.</p>

<subsection id="GUI2.1.1" title="Observable Values">

<p>Many instance variables in JavaFX objects are <newword>observable values</newword>, meaning that they emit
events.  Many of the observables are actually <newword>observable properties</newword> in the sense that they are bindable.
The width and height of a canvas are observables of type <classname>DoubleProperty</classname>.
The text in a text field or label is an observable of type <classname>StringProperty</classname>.
The list of children of a <classname>Pane</classname> is an observable of type
<atype>ObservableList&lt;Node&gt;</atype>.   A checkbox has
observable property of type <classname>BooleanProperty</classname> that says whether
the box is currently checked. The color of the text in a label is an
observable of type <atype>ObjectProperty&lt;Paint&gt;</atype>. </p>

<p>An observable value emits two kinds of events.  It emits a change event
whenever the value changes.  A handler for the event must implement the parameterized functional interface
<atype>ChangeListener&lt;T&gt;</atype>, which defines a method <code>changed(target,oldValue,newValue)</code>.
The first parameter of <code>change()</code> is the observable whose value has changed; the second parameter
is the previous value of that observable; and the third parameter is the new value.  Suppose, for example,
we want the text on a label to display the current value of a slider.  When the slider value changes,
we need to change the text on the label to match.  One way to do that is to register a change listener with
the property that records the value of the slider:</p>

<pre>slider.valueProperty().addListener( 
            (t,oldVal,newVal) -&gt; label.setText("Slider Value: " + newVal) );</pre>

<np>However, we will see below that there is a better way to accomplish the same thing.</np>

<p>The second type of event emitted by an observable value is an invalidation event,
which is emitted when the current value becomes invalid for some reason.  An invalid value
will never be seen by another object; any attempt to read the value will cause the value to
be recomputed and become valid again.  An invalidation event is a notice that the value needs
to be recomputed, but the value won't actually be recomputed until it is needed.   This is 
something called "lazy evaluation" of the value: The work of recomputing the value is not done
until the new value is actually needed for something.  Lazy evaluation can be more efficient
than recomputing the value every time it is invalidated.  Let's say a dozen things happen
that invalidate the value before the value is needed&mdash;with lazy evaluation, the value will
only be recomputed once, when it is needed, rather than a dozen times.
More important for us, the observable would only emit one invalidation event, not a dozen.
This avoids multiple redundant calls to invalidation listeners.  In most cases in JavaFX,
invalidation listeners should be used in preference to change listeners.</p>

<p>An <classname>InvalidationListener</classname> defines the single method <code>invalidated(obv)</code>,
where the parameter is the observable that has been invalidated.  Consider this code,
where <code>sayHello</code> is a <classname>CheckBox</classname>:</p>

<pre>sayHello.selectedProperty().addListener( e -&gt; {
    if (sayHello.isSelected())
        label.settext("Hello");
    else
        label.setText("Goodbye");
});</pre>

<np>In this example, an <classname>InvalidationListener</classname> is registered as a listener.
You could accomplish almost the same thing using <code>sayHello.setOnAction()</code>.
However, an <classname>ActionListener</classname> would be called only when the <b>user</b>
changes the selected state of the checkbox, while the invalidation listener is called whenever
the value changes, including changes made by calling <code>sayHello.setSelected()</code>.
Note that <classname>ChangeListeners</classname> are also registered using a method named <code>addListener()</code>.
The compiler can tell the difference, even when the listener is given by a lambda expression, 
because a lambda expression for a <classname>ChangeListener</classname>
has three parameters, while a lambda expression for an <classname>InvalidationListener</classname>
has only one parameter.</np>

<p>You might have asked yourself what would happen if the <code>selectedProperty</code> of <code>sayHello</code>
was merely invalidated rather than changed.  Would <code>sayHello.isSelected()</code>  return the
current invalid value or the new value?  In fact, calling <code>sayHello.isSelected()</code>
would force the computation of the new value, and it would return the new value.  An invalid
value is never seen because any attempt to read it forces the new value to be computed.</p>

<p>The general pattern in JavaFX is that an observable property of an object is accessed by calling 
an instance method whose name
ends with "Property".  For example, the value property of a slider is given by <code>slider.valueProperty()</code>,
and the text property of a label is given by <code>label.textProperty()</code>.  Some JavaFX objects have
observable values that are not properties.  An observable property is bindable, as we will see
in the next section.  A plain observable value is not bindable, but it does emit change events
and invalidation events, and you can register listeners if you want to respond to changes
in the value.</p>

</subsection>
  
  
   
    
<subsection id="GUI2.1.2" title="Bindable Properties">

<p>Many JavaFX observable properties can be bound to another property of the same type.
(The exceptions are "read-only properties"; you can't bind a read-only property to another
property, although you <b>can</b> bind a property <b>to</b> a read-only property.)
As a basic example, suppose that we want the text in a label to always be the same as
the text in a text field.  That can be implemented simply by binding the <code>textProperty</code>
of the label to the <code>textProperty</code> of the text field:</p>
  
<pre>Label message = new Label("Never Seen");
TextField input = new TextField("Type Here!");
message.textProperty().bind( input.textProperty() );</pre>
  
<np>The <code>bind()</code> method forces the value of <code>message.textProperty()</code>
to be the same as the value of <code>input.textProperty()</code>.  As soon as <code>bind()</code>
is executed, the text from the text field is copied into the label, so that the initial
text in the label&mdash;"Never&nbsp;Seen" in the example&mdash;is never seen by the user.  
As the program runs, any change to the text in the
text field will automatically be applied to the label as well, whether that change is due to the
user typing in the text field or due to <code>input.setText()</code> being called.
Bindings are implemented internally using events and listeners, but the point is that
you don't have to set up the listeners and respond to the events yourself&mdash;everything is set up
by the <code>bind()</code> method.</np>

<p>When <code>bind()</code> is used to bind a property to another property,
it becomes illegal to change the value of the bound property directly.  In the
example, any call to <code>message.setText()</code> would throw an exception.
And of course, a property can only be bound to one other property at a time.
The <code>unbind()</code> method, which takes no parameter, can be used to remove a binding:</p>

<pre>message.textProperty().unbind();</pre>

<p>The sample program <sourceref href="BoundPropertyDemo.java"/> contains several examples
of bound properties.  In particular, the text property of a large label is bound to the
text property of a text field, as in the preceding example, so that typing in the text field also changes the text
on the label.  Here is a screenshot:</p>

<img src="bound-property-demo.png" width="500" height="141" tex="bound-property-demo.eps" texscale="0.7" 
          alt="screeshot of BoundPropertyDemo.java"/>

<p>The label at the lower right of this window provides another example of binding.  The label
displays the value of the slider, and the text
on the label will change as the user adjusts the slider value.  As noted at the beginning of
this section, one way to implement this interaction would be to register a listener with the
slider's <code>valueProperty</code>.  Here, however, it's done with a binding.
Now, the <code>textProprety</code> of the label is a <classname>StringProperty</classname>
while the <code>valueProperty</code> of the slider is a <classname>DoubleProperty</classname>,
so it's not possible to directly bind the two values.  A binding only works for properties
of the same type.  However, a <classname>DoubleProperty</classname> has a method,
<code>asString()</code> that converts the property into a string property.
That is, if <code>slider</code> is a <classname>Slider</classname>, then</p>

<pre>slider.valueProperty().asString()</pre>

<np>is a string property representing the <ptype>double</ptype> value
of the slider as a string.  The text property of a label can be bound to that
string property.  In fact, <code>asString()</code> can take a format string (like the
ones used with <code>System.out.printf</code>) as an optional parameter that is used
to format the <ptype>double</ptype>
value.  In the program, the label is <code>sliderVal</code>, and its text property
is bound by saying:</np>

<pre>sliderVal.textProperty().bind( 
                   slider.valueProperty().asString("Slider Value: %1.2f") );</pre>
                   
<np>(Actually, <code>slider.valueProperty().asString</code> is of type <classname>StringBinding</classname>
rather than <classname>StringProperty</classname>, but the distinction is not important here,
and I will ignore it.)</np>

<p>Property objects have many methods for converting properties of one
type into properties of another type, as well as other operations.  For another
example, a <classname>DoubleProperty</classname> has a method <code>lessThan(number)</code>
that returns a boolean property whose value is <code>true</code>
when the value of the <classname>DoubleProperty</classname> is less than <code>number</code>.
For example, a <classname>Button</classname>, <code>btn</code> has a <classname>BooleanProperty</classname>,
<code>btn.disableProperty()</code> that tells whether the button is disabled.  If we want the
button to be disabled when the value on a slider is less than 20, we can do that by
binding the button's disable property as follows:</p>

<pre>btn.disableProperty().bind( slider.valueProperty().lessThan(20) );</pre>

<np>There are similar methods <code>greaterThan()</code>, <code>lessThanOrEqual()</code>,
<code>isNotEqualTo()</code>, and so on.  There are also methods for doing math.  For
example,</np>

<pre>slider.valueProperty().multiply(2)</pre>

<np>is a double property whose value is 2 times the value of the slider.</np>

<break/>

<p>The class <classname>When</classname>, from package <code>javafx.beans.binding</code>,
can be used to apply something like the ternary operator, "?:" (see <localref href="basics.5.5"/>),
to boolean properties, with a rather strange syntax.  If <code>boolProp</code> is a boolean
property, and if <code>trueVal</code> and <code>falseVal</code> are any values that both have
the same type, then</p>

<pre>new When(boolProp).then(trueVal).otherwise(falseVal)</pre>

<np>represents a property whose type is the same as the type of <code>trueVal</code>
and <code>falseVal</code>.  The value of this property is <code>trueVal</code> if
<code>boolProp</code> has the value <code>true</code>, and the value is <code>falseVal</code>
if <code>boolProp</code> has the value <code>false</code>.</np>

<p>In an earlier example, we used a listener to set the text in a label to "Hello" or
"Goodbye" depending on whether or not a checkbox, <code>sayHello</code>, is checked.
Here's how to do the same thing with a property binding:</p>

<pre>label.textProperty().bind( 
     new When(sayHello.selectedProperty()).then("Hello").otherwise("Goodbye")
);</pre>

<np>The parameter in <code>new When(sayHello.selectedProperty())</code> is a boolean
property.  Since "Hello" and "Goodbye" are values of type <classname>String</classname>,
the property that results from the complete expression is a string property, which matches the type of 
<code>label.textProperty()</code>.</np>

<p>The same sort of thing is done in <sourceref href="BoundPropertyDemo.java"/> to control the
background color of the big label.  The background is controlled by a checkbox using binding
and an object of type <classname>When</classname>.  See the well-commented source code for
details.</p>

<break/>

<p>A straightforward, but useful, application of property binding can be found in the
sample program <sourceref href="CanvasResizeDemo.java"/>.  The program shows fifty small
red disks that bounce around in a window.  The disks are drawn to a <classname>Canvas</classname>
that fills the window, and the disks bounce off the edges of the canvas.
In previous examples that used a canvas, the window was made
non-resizable because canvasses do not automatically change size.  However, it is possible
for a program to change the size of a canvas by setting the canvas's height and width
properties.  That can be done by calling <code>canvas.setWidth(w)</code> and
<code>canvas.setHeight(h)</code>.  However, the height and width are bindable properties 
of type <classname>DoubleProperty</classname>, so another way to set the canvas size
is to bind these properties to an appropriate source.</p>

<p>In the program, the canvas is contained in a <classname>Pane</classname>
that serves as the root of the scene graph and fills the window.  When the size of the
window is changed by the user, the size of the <classname>Pane</classname> is automatically
set to match.  If we want the canvas size to track the size of the pane, it is only
necessary to bind the width property of the canvas to the width property of the
pane, and to bind the height property of the canvas to the height property of
the pane.  That is done in the program with two lines of code:</p>

<pre>canvas.widthProperty().bind( root.widthProperty() ); 
canvas.heightProperty().bind( root.heightProperty() );</pre>

<np>If you run the program and increase the size of the window, you can see that the
canvas has also increased in size, because the bouncing red disks will spread out to
fill the larger space.  Similarly, if you decrease the size, the disks will be trapped
in the smaller space.</np>

<p>In this program, the canvas is being continually redrawn, so no special action needs
to be taken to redraw it when the canvas size is changed.  In some programs, it might
be necessary to redraw the contents of the canvas when its size changes.  One way to
make that happen is to add listeners to the width and height properties of the
canvas.  The listeners can redraw the canvas in response to changes in the width
or height.</p>

</subsection>
  
  
<subsection id="GUI2.1.3" title="Bidirectional Bindings">

<p>Bindings created using the <code>bind()</code> method are one-way bindings: They
only work in one direction.  One-way 
bindings are not always appropriate.  Suppose for example that <code>cb1</code>
and <code>cb2</code> are of type <classname>CheckBox</classname>, and that we
would like the two checkboxes to always be in the same state.  That can't be
done with a one-way binding.  If we do</p>
   
<pre>cb2.selectedProperty().bind( cb1.selectedProperty() );</pre>

<np>that will make <code>cb2</code> match its state to <code>cb1</code>.
But changing the selected state of <code>cb2</code> will not change the state of
<code>cb1</code>; instead, it will cause an exception, since it is illegal
to try to change the value of a property that has been bound using
<code>bind()</code>.  In fact, if the user just clicks <code>cb2</code>,
there will be an exception as the checkbox tries to change state.</np>

<p>The solution that we need here is something called a <newword>bidirectional
binding</newword>.  When two properties are bound bidirectionally, then
the value of either property can be changed, and
the other property will automatically be changed to the same value.
Bidirectional bindings are set up with the method
<code>bindBidirectional()</code>.  For our two checkboxes,
we can say:</p>

<pre>cb2.selectedProperty().bindBidirectional( cb1.selectedProperty() );</pre>

<np>Now, the user can click either checkbox, and the other will also
change state.  This would probably not be useful for two checkboxes,
but it can be useful to synchronize the state of a <classname>CheckBox</classname>
in a window with the state of a <classname>CheckMenuItem</classname> in
a menu.  The user would have a choice of using either interface element.
Similar redundant interface elements are common in menus and toolbars.</np>

<p>The sample program <sourceref href="BoundPropertyDemo.java"/> does
something similar with <classname>RadioButtons</classname> and 
<classname>RadioMenuItems</classname>.  The color of the label in the program
can be controlled using either a "Color" menu or a set of
radio buttons.  The state of each <classname>RadioButton</classname>
is bidirectionally bound to the state of a corresponding 
<classname>RadioMenuItem</classname>.  It might be worth looking
at how it's done in detail:</p>

<pre>Menu colorMenu = new Menu("Color");

Color[] colors = { Color.BLACK, Color.RED, Color.GREEN, Color.BLUE };
String[] colorNames = { "Black", "Red", "Green", "Blue" };

ToggleGroup colorGroup = new ToggleGroup();

for (int i = 0; i &lt; colors.length; i++) {

        // Make a menu item and corresponding radio button.
    RadioButton button = new RadioButton(colorNames[i]);
    RadioMenuItem menuItem = new RadioMenuItem(colorNames[i]);
    
    button.selectedProperty().bindBidirectional( menuItem.selectedProperty() );
    
    menuItem.setToggleGroup(colorGroup);
    
        // Note how UserData is used to store the color object
        // associated with the menu item, for later use.  
    menuItem.setUserData(colors[i]);
    
    right.getChildren().add(button);    // add button to a container
    colorMenu.getItems().add(menuItem); // add menu item to a menu
    if (i == 0)
        menuItem.setSelected(true);
}

colorGroup.selectedToggleProperty().addListener( e -> {
            // Listen for changes to the selectedToggleProperty
            // of the ToggleGroup, so that the color of the
            // label can be set to match the selected menu item.
    Toggle t = colorGroup.getSelectedToggle();
    if (t != null) {
            // t is the selected RadioMenuItem.  Get the color
            // from its UserData, and use it to set the color
            // of the text.  The value of the selectedToggleProperty()
            // can momentarily be null as one toggle is unselected
            // and another is selected.
        Color c = (Color)t.getUserData();
        message.setTextFill(c);
    }
});</pre>

<np>Note that the menu items are added to a <classname>ToggleGroup</classname>
(see <localref href="GUI1.4.3"/>), but the buttons are not.  Suppose that the user clicks on
a currently unselected radio button.  The state of the button changes to
"selected."  Because of the bidirectional binding, the state of the
corresponding radio menu item must also be changed to "selected."
Before that can happen, however, the <classname>ToggleGroup</classname>
will change the state of the currently selected radio menu item to "unselected,"
which will in turn cause the state of its associated radio button to change
to "unselected".  In the end, the states of two radio buttons and two
radio menu items are changed.</np>

<p>(Although it is not relevant to property binding, you should also check out
how this code uses the <code>userData</code> property of the radio buttons.
Every scene graph node has user data of type <classname>Object</classname>,
which is not used by the system.  The <code>userData</code> property of a node can be
a convenient place for a programmer to store data of any type that the
programmer wants to associate with the node.  In this case, the user
data for a radio menu item is a value of type <classname>Color</classname>,
and that color value is used when the menu item is selected.)</p>

<break/>

<p>I hope that the examples in this section have convinced you that
property binding can be an effective way to program interactions
between objects in a JavaFX program.  This style of programming might
look strange at first, but it can be easier and clearer than working
directly with events and listeners.</p>

</subsection>
  
  
  
   
</section>