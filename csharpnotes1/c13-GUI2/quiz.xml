<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE quiz SYSTEM "../csharpnotes1.dtd" >

<quiz>


<question>
<ques><p>What is an "observable property"?</p>
</ques>
<ans><p>An observable <b>value</b> is an object that emits events when
its value is changed.  It is possible to add listeners to the object,
and the listeners will be notified when its value changes.</p>
<p>An observable property is a property (that is, an instance variable) in
an object that is an observable value.  Furthermore, the use of the term
"observable property" usually implies that it is possible to "bind" other properties
of the same type to this one, so that the value of the bound property will
track the value of the property to which it is bound.</p>
</ans>
</question>

<question>
<ques><p>Suppose that <code>input</code> is a <classname>TextField</classname> and
that <code>label</code> is a <classname>Label</classname>.  Suppose that you want
the text on the label to always be the same as the text in the text field.
Write <b>two</b> code segments to accomplish that, one using an event listener and
one using property binding.</p>
</ques>
<ans><p>The text field has a property <code>input.textProperty()</code> that
represents the text in the input box.  We can add an event listener to that
property, and the handler for that event can set the text in the label:</p>
<pre>input.textProperty().addListener( e -> label.setText(input.getText()) );</pre>
<np>The label also has a property, <code>label.textProperty()</code>, representing
the text that it displays, so another option is to bind that property to the
property of the input box:</np>
<pre>label.textProperty().bind( input.textProperty() );</pre>
<np>One difference between these two approaches is that the binding will immediately
copy the current text from the text field into the label.  When using the listener, we would
have to manually set up the initial texts to be the same.</np>
<p>By the way, the listener that was used in the above command is an <classname>InvalidationListener</classname>.
Another approach would be to use a <classname>ChangeListener</classname>.  The handler for a 
<classname>ChangeEvent</classname> takes three parameters, where the third parameter is the new
value of the observable property, so the task could also be accomplished by</p>
<pre>input.textProperty().addListener( (o,oldVal,newVal) -> label.setText(newVal)) );</pre>
</ans>
</question>

<question>
<ques><p>Describe the picture that is produced by the following
code, where <code>canvas</code> is a <classname>Canvas</classname>:</p>
<pre>
GraphicsContext g = canvas.getGraphicsContext2D();
g.setFill(Color.WHITE);
g.fillRect(0,0,canvas.getWidth(),canvas.getHeight());
g.translate( canvas.getWidth()/2, canvas.getHeight()/2 );
g.rotate( 30 );
g.setFill(Color.RED);
g.fillRect(0,0,100,100);
</pre>
</ques>
<ans><p>The entire canvas is filled with white, except for a 
filled red square that is 100-by-100 pixels in size.
The corner of the square is at the center of the canvas that is being painted,
and the top side of the square descends at a 30 degree angle from that point.
The command <code>g.fillRect(0,0,100,100)</code> draws a red square with its
top left corner at (0,0).  But that square is first rotated by 30 degrees
and then translated.  The translation moves the point (0,0) to the 
point <code>(canvas.getWidth()/2,canvas.getHeight()/2)</code>,
placing the top left corner of the square at the center of the canvas.
(Transformations are applied to objects in the opposite of their order in the code.)</p>
<p>Of course, this answer assumes that no transformation had been
applied <b>before</b> this code is executed.  If there is a previous
transformation, then that transform would be applied to the picture
that is described in the answer, before that picture appears on the
screen.</p>
</ans>
</question>


<question>
<ques><p>Create a <classname>LinearGradient</classname> paint and use it to fill
the rectangle drawn by <code>g.fillRect(100,100,300,200)</code>.  The
rectangle should look like this, light gray at the top and black at the bottom:</p>
<img src="gradient-rect.png" width="320" height="225" tex="gradient-rect.eps" texscale="0.5" 
              alt="a rectangle filled with a gray-to-black gradient"/>
<np>(The API for creating gradient paints is complicated.  It's OK to look it up!)</np>
</ques>
<ans><p>The gradient can be defined by two color stops, one at 0, with color 
<code>Color.LIGHTGRAY</code> and one at 1, with color <code>Color.BLACK</code>.
Since the rectangle is covered by one copy of the gradient, the
<code>CycleMethod</code> for the gradient is irrelevant.  We can specify the
start point for the gradient to be the top left corner of the rectangle, (100,100), 
and the end point for the gradient to be the bottom left corner, (100,300).
(Note that the height of the rectangle is 200; since the top of the rectangle
is at y=100, the bottom is at y=100+200.  The end point of the gradient is
specified using (x,y)-coordinates, not width and height like the rectangle.)
So the rectangle can be drawn with</p>

<pre>LinearGradient gradient = 
                   new LinearGradient( 100,100, 100,300, false, CycleMethod.REPEAT,
                         new Stop(0,Color.LIGHTGRAY), new Stop(1,Color.BLACK));
g.setFill(gradient);
g.fillRect(100,100,300,200)</pre>

<np>Many variations on this are possible.  For example, the start point could
be at the bottom right corner, and the end point at the top right corner.
In that case, the color for the first color stop would be black, and the color
for the second color stop would be light gray.   We could also use a
proportional gradient, where the coordinates for the start and end points
are given in a coordinate system where the coordinates of the top left
corner are (0,0) and the coordinates of the bottom left corner are (0,1):</np>

<pre>LinearGradient gradient = 
                   new LinearGradient( 0,0, 0,1, true, CycleMethod.REPEAT,
                         new Stop(0,Color.LIGHTGRAY), new Stop(1,Color.BLACK));</pre>
</ans>
</question>

   
<question>
<ques><p>Suppose that <code>g</code> is a <classname>GraphicsContext</classname>.
Explain the purpose of the methods <code>g.save()</code> and <code>g.restore()</code>.</p>
</ques>
<ans><p>A call to <code>g.save()</code> pushes a copy of the current state of
the graphics context onto a stack of saved states.  The state include properties
of the graphics context that affect drawing such as the transform, the stroke
and fill paints, and the line width.  A call to <code>g.restore()</code> will
pop the most recently saved state from the stack and restore graphics context
properties to their values from that state.  Any changes to the state that were
made after the corresponding call to <code>g.save()</code> will be undone.
This allows you to make temporary changes to the state while being
sure that those changes will not carry over to future drawing.</p>
</ans>
</question>

   
   
<question>
<ques><p>What does the acronym <i>MVC</i> stand for, and how does it apply to the
<classname>List</classname> class?</p>
</ques>
<ans><p>MVC stands for "Model-View-Controller."  In a <classname>List</classname>,
the <i>view</i> is the actual visible component on the screen.  The <i>model</i>
is the collection of data that specifies, among other things, what appears in each
cell of the list.  This data is stored in an observable list, and the view
listens for changes in that list and redraws itself when any change occurs.
(Another part of the model is the "selection model", which keeps
track of which item is currently selected in the list.)
The <i>controller</i> is responsible for interaction
with the user.  It consists mostly of a bunch of listener objects that listen
for events generated when the user interacts with the list.  The listeners
respond by making changes in the model, which will in turn cause a change in the
view.</p>
</ans>
</question>


<question>
<ques><p>What is the difference between a "modal" dialog box and a
"modeless" dialog box?</p>
</ques>
<ans><p>When a modal dialog box is shown, the user will not be able to
use the parent window of the dialog box until the dialog box is closed.
With a modeless dialog box, it is possible for the user to work with
both the dialog box and its parent window.  (Some dialog boxes are
"application modal," meaning that they block interaction with the
entire application, not just with one window.)</p>
</ans>
</question>


<question>
<ques><p>The Java API includes some classes in a package named <code>org.w3c.dom</code>.
Why such a funny package name?</p>
</ques>
<ans><p>The packages presumably come from an organization that owns the Web domain name
<code>w3c.org</code>.  (In fact, it's the organization that controls standards for the web.)
This follows the recommended naming convention for packages: The package name starts with
the pieces of the domain name in reverse order.  The last part of the package name, "dom",
doesn't come from the domain name; it was something chosen by the organization for this
particular package, to distinguish it from other packages that might be put out by the same 
organization.  (In fact, the <code>org.w3c.dom</code> package contains classes and
subpackages related to the "Document Object Model," which is used in the processing
of XML and HTML documents.)</p>
</ans>
</question>


<question>
<ques><p>Suppose that <code>closeItem</code> is a <classname>MenuItem</classname>.
What is done by the following statement? (What is an "accelerator"?)</p>
<pre>closeItem.setAccelerator( KeyCombination.valueOf("ctrl+W") );</pre>
</ques>
<ans><p>An accelerator for a menu item is a combination of keyboard keys 
that is equivalent to selecting that item from a menu.
<code>KeyCombination.valueOf("ctrl+W")</code> is a key combination that
represents pressing the "W" key while holding down the control key.
Since that key combination is installed as the accelerator for
<code>closeItem</code>, hitting "W" while holding down the control key
will invoke the same action as selecting <code>closeItem</code> with
the mouse.</p>
</ans>
</question>

   
<question>
<ques><p>What is meant by <i>Internationalization</i> of a program?</p>
</ques>
<ans><p>Internationalization refers to writing the program in a way that
will make it easy to adapt the program for use in a variety of "locales."
For example, it should be easy to translate all the strings that are used
in the program into other languages.  To make this possible the strings
should not be hard coded into the program itself.  Instead, they are
placed in a separate resource file, so that the program can be translated
into another language simply by writing a resource file for that language.
(Internationalization also applies to the format that is used for dates
and numbers.)</p>
</ans>
</question>

   
</quiz>