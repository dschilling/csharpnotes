<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section SYSTEM "../csharpnotes1.dtd" >

<section id="subroutines.5" title="APIs, Packages, Modules, and Javadoc">

<p><start><big>A</big>s computers and their user interfaces</start> have become
easier to use, they have also become more complex for programmers to deal with.
You can write programs for a simple console-style user interface using just a
few subroutines that write output to the console and read the user's typed
replies. A modern graphical user interface, with windows, buttons, scroll bars,
menus, text-input boxes, and so on, might make things easier for the user, but
it forces the programmer to cope with a hugely expanded array of possibilities.
The programmer sees this increased complexity in the form of great numbers of
subroutines that are provided for managing the user interface, as well as for
other purposes.</p>
   
<subsection id="subroutines.5.1" title="Toolboxes">

<p>Someone who wanted to program for the original Macintosh computers&mdash;and to produce
programs that look and behave the way users expected them to&mdash;had to deal with
the "Macintosh Toolbox," a collection of well over a thousand different
subroutines. There were routines for opening and closing windows, for drawing
geometric figures and text to windows, for adding buttons to windows, and for
responding to mouse clicks on the window. There were other routines for creating
menus and for reacting to user selections from menus. Aside from the user
interface, there were routines for opening files and reading data from them, for
communicating over a network, for sending output to a printer, for handling
communication between programs, and in general for doing all the standard
things that a computer has to do.  Microsoft Windows provides its own
set of subroutines for programmers to use, and they are quite a bit different
from the subroutines used on the Mac.  Linux has several different GUI toolboxes
for the programmer to choose from.</p>

<p>The analogy of a "toolbox" is a good one to keep in mind. Every programming
project involves a mixture of innovation and reuse of existing tools. A
programmer is given a set of tools to work with, starting with the set of basic
tools that are built into the language: things like variables, assignment
statements, if statements, and loops. To these, the programmer can add existing
toolboxes full of routines that have already been written for performing
certain tasks. These tools, if they are well-designed, can be used as true
black boxes: They can be called to perform their assigned tasks without
worrying about the particular steps they go through to accomplish those tasks.
The innovative part of programming is to take all these tools and apply them to
some particular project or problem (word-processing, keeping track of bank
accounts, processing image data from a space probe, Web browsing, computer
games,&nbsp;&dots;). This is called <newword>applications programming</newword>.</p>

<p>A software toolbox is a kind of black box, and it presents a certain
interface to the programmer. This interface is a specification of what routines
are in the toolbox, what parameters they use, and what tasks they perform. This
information constitutes the <newword>API</newword>, or <newword>Application Programming Interface</newword>, 
associated with the toolbox.  The API is the abstraction through which you access
the functionality of the software in the toolbox.  The Macintosh API is
a specification of all the routines available in the Macintosh Toolbox. A
company that makes some hardware device&mdash;say a card for connecting a computer
to a network&mdash;might publish an API for that device consisting of a list of
routines that programmers can call in order to communicate with and control the
device. Scientists who write a set of routines for doing some kind of complex
computation&mdash;such as solving "differential equations," say&mdash;would provide
an API to allow others to use those routines without understanding the details
of the computations they perform.</p>

<break/>

<p>The Java programming language is supplemented by a large, standard API.
You've seen part of this API already, in the form of mathematical subroutines
such as <code>Math.sqrt()</code>, the <classname>String</classname> data type and its associated
routines, and the <code>System.out.print()</code> routines. The standard Java API
includes routines for working with graphical user interfaces, for network
communication, for reading and writing files, and more. It's tempting to think
of these routines as being part of the Java language, but they are
technically subroutines that have been written and made available for use in
Java programs.</p>

<p>Java is platform-independent. That is, the same program can run on platforms
as diverse as MacOS, Windows, Linux, and others. The same Java API must work
on all these platforms. But notice that it is the <b>interface</b>
that is platform-independent; the <b>implementation</b> of some parts of the API varies from
one platform to another. A Java system on a particular computer includes
implementations of all the standard API routines. A Java program includes only
<b>calls</b> to those routines. When the Java interpreter executes a
program and encounters a call to one of the standard routines, it will pull up
and execute the implementation of that routine which is appropriate for the
particular platform on which it is running. This is a very powerful idea. 
It is the power of abstraction.  It
means that you only need to learn one API to program for a wide variety of
platforms.</p>

</subsection>
   
<subsection id="subroutines.5.2" title="Java's Standard Packages">

<p>Like all subroutines in Java, the routines in the standard API are grouped
into classes. To provide larger-scale organization, classes in Java can be
grouped into <newword>packages</newword>, which were introduced briefly in
<localref href="basics.6.5"/>.  You can have even higher
levels of grouping, since packages can also contain other packages. In fact,
the entire standard Java API is implemented in several packages. One of these,
which is named "<code>java</code>", contains several non-GUI packages as well as the
original AWT graphical user interface classes. Another package,
"<code>javax</code>", contains the classes used by the Swing graphical user interface<swing> that
is covered in this textbook</swing>, as well as many other classes.
And "<code>javafx</code>," which is not a standard part of Java,
contains the <swing>alternative graphics API, 
JavaFX</swing><fx> JavaFX API that is used for GUI programming in this textbook</fx>.</p>

<p>A package can contain both classes and other packages. A package that is
contained in another package is sometimes called a "subpackage." The
<code>java</code> and <code><fx>javafx</fx><swing>javax</swing></code> packages both contain subpackages. 
One of the subpackages of <code>java</code>, for example, is named "<code>util</code>".
Since <code>util</code> is contained within <code>java</code>, its full name is actually
<code>java.util</code>.  This package contains a variety of utility classes, including
the <classname>Scanner</classname> class that was discussed in <localref href="basics.4.6"/>. 
The <code>java</code> package includes several other subpackages, such as
<code>java.io</code>, which provides facilities for input/output, and
<code>java.net</code>, which deals with network communication. The
most basic package is called <code>java.lang</code>. This package contains
fundamental classes such as <classname>String</classname>, <classname>Math</classname>,
<classname>Integer</classname>, and <classname>Double</classname>.</p>


<p>It might be helpful to look at a graphical representation of the levels of
nesting in the <code>java</code> package, its subpackages, the classes in those
subpackages, and the subroutines in those classes. This is not a complete
picture, since it shows only a very few of the many items in each element:</p>


<img width="524" height="350" alt="(Diagram of subroutine/class/package nesting)" 
   src="package-class-subroutine.png" tex="package-class-subroutine.eps" texscale="0.6"/>
   
<fxdiv>
<p>Similarly, the package <code>javafx</code> contains a package <code>javafx.scene</code>,
which in turn contains <code>javafx.scene.control</code>.
This package contains classes that represent GUI components
such as buttons and input boxes.  Another subpackage, <code>javafx.scene.paint</code>,
contains class <classname>Color</classname> and other classes that define ways to
fill and stroke a shape.</p>
</fxdiv>
<swingdiv>
<p>Similarly, the package <code>javax</code> contains the package <code>javax.swing</code>
that contains classes representing GUI components such as buttons and input boxes.
And <code>javax.swing</code> in turn contains a package <code>javax.swing.event</code>
that contains classes for working with events such as key presses and mouse clicks.</p>
</swingdiv>

<p>The standard Java API includes thousands of classes in hundreds of packages.  Many of
the classes are rather obscure or
very specialized, but you might want to browse through the documentation to see
what is available. As I write this, the
documentation for the complete basic API for Java&nbsp;8 can be found at</p>
<pre><a href="https://docs.oracle.com/javase/8/docs/api/">https://docs.oracle.com/javase/8/docs/api/</a></pre>
<fxdiv>
<np>and for JavaFX 8 at</np>
<pre><a href="https://docs.oracle.com/javase/8/javafx/api/toc.htm">https://docs.oracle.com/javase/8/javafx/api/toc.htm</a></pre>
</fxdiv>

<np>See the subsection about "modules," below, for a discussion of changes
that were made the language after Java&nbsp;8 and for links to the documentation for Java&nbsp;17.
However, for the purposes of this textbook, you will probably find that the
Java&nbsp;8 documentation is easier to use, and the information that it provides is still relevant.</np>

<p>Even an expert programmer won't be familiar with the entire Java API,
or even a majority of it.  In this book, you'll only encounter
several dozen classes, and those will be sufficient for writing a 
wide variety of programs.</p>

</subsection>
   
<subsection id="subroutines.5.3" title="Using Classes from Packages">

<p>Let's say that you want to use the class 
<fx><code>javafx.scene.paint.Color</code></fx><swing><code>java.awt.Color</code></swing> in a
program that you are writing.  This is the full name of class <classname>Color</classname>
in package <fx><code>javafx.scene.paint</code></fx><swing><code>java.awt</code></swing>.
Like any class, <fx><code>javafx.scene.paint.Color</code></fx><swing><code>java.awt.Color</code></swing> is
a type, which means that you can use it to declare variables and parameters and
to specify the return type of a function. One way to do this is to use the
full name of the class as the name of the type. For example, suppose that you
want to declare a variable named <code>rectColor</code> of type <classname>Color</classname>.
You could say:</p>

<pre><fx>javafx.scene.paint.Color</fx><swing>java.awt.Color</swing> rectColor;</pre>

<np>This is just an ordinary variable declaration of the form
"<bnf>type-name</bnf>&nbsp;<bnf>variable-name</bnf>;".
Of course, using the full name of every class can get tiresome, and you will hardly
ever see full names like this used in a program.
Java makes it possible to avoid using the full name of a class by <newword>importing</newword>
the class. If you put</np>

<pre>import <fx>javafx.scene.paint.Color</fx><swing>java.awt.Color</swing>;</pre>

<np>at the beginning of a Java source code file, then, in the rest of the file,
you can abbreviate the full name <fx><code>javafx.scene.paint.Color</code></fx><swing><code>java.awt.Color</code></swing> to just the simple name of
the class, which is <code>Color</code>.  Note that the <code>import</code> line comes at the start of 
a file (after the <code>package</code> statement, if there is one) 
and is not inside any class.  Although it is sometimes referred to
as a statement, it is more properly called an <newword>import&nbsp;directive</newword>
since it is not a statement in the usual sense.  The <code>import</code>
directive "<code>import&nbsp;<fx>javafx.scene.paint.Color</fx><swing>java.awt.Color</swing></code>" would allow you to say</np>

<pre>Color  rectColor;</pre>

<np>to declare the variable.  Note that the only effect of the
<code>import</code> directive is to allow you to use simple class names instead of
full "package.class" names. You aren't really importing anything substantial;
if you leave out the <code>import</code> directive, you can still access the class&mdash;you 
just have to use its full name.  There is a shortcut for importing all
the classes from a given package. For example, you can import all the classes from
<code>java.util</code> by saying</np>

<pre>import java.util.*;</pre>

<np>The "<code>*</code>" is a <newword>wildcard</newword> that matches every class in the package.
(However, it does not match subpackages; for example, you <b>cannot</b> import the entire
contents of all the subpackages of the <code>java</code> package by saying
<code>import&nbsp;java.*</code>.)</np>
   
<p>Some programmers think that using a wildcard in an <code>import</code> statement
is bad style, since it can make a large number of class names available that you are
not going to use and might not even know about.  They think it is better to explicitly
import each individual class that you want to use.  In my own programming, I often
use wildcards to import all the classes from the most relevant packages, and use
individual imports when I am using just one or two classes from a given package.</p>

   
<p>A program that works with networking might include the line
"<code>import&nbsp;java.net.*;</code>", while one that reads or writes files might
use "<code>import&nbsp;java.io.*;</code>".  But when you start importing lots
of packages in this way, you have to be careful about one thing: It's possible
for two classes that are in different packages to have the same name. For
example, both the <code>java.awt</code> package and the <code>java.util</code> package
contain a class named <code>List</code>. If you import both <code>java.awt.*</code> and
<code>java.util.*</code>, the simple name <code>List</code> will be ambiguous. If you
try to declare a variable of type <code>List</code>, you will get a compiler error
message about an ambiguous class name.  You can still use both classes in your program: Use the full
name of the class, either <code>java.awt.List</code> or <code>java.util.List</code>.
Another solution, of course, is to use <code>import</code> to import the individual classes you
need, instead of importing entire packages.</p>

<p>Because the package <code>java.lang</code> is so fundamental, all the classes in
<code>java.lang</code> are <b>automatically</b> imported into every
program. It's as if every program began with the statement "<code>import&nbsp;java.lang.*;</code>". 
This is why we have been able to use the class name
<classname>String</classname> instead of <code>java.lang.String</code>, and <code>Math.sqrt()</code>
instead of <code>java.lang.Math.sqrt()</code>. It would still, however, be
perfectly legal to use the longer forms of the names.</p>

<p>Programmers can create new packages. Suppose that you want some classes that
you are writing to be in a package named <code>utilities</code>. Then the source
code files that defines those classes must begin with the line</p>

<pre>package utilities;</pre>

<np>This would come even before any <code>import</code> directive in that file.
Furthermore, the source code file
would be placed in a folder with the same name as the package, "utilities" in this example.
And a class that is in a subpackage must be in a subfolder.  For example, a class in
a package named <code>utilities.net</code> would be in folder named "net" inside a
folder named "utilities".  A class that is
in a package automatically has access to other classes in the same package; that is,
a class doesn't have to import classes from the package in which it is defined.</np>
   
<p>In projects that define large numbers of classes, it makes sense to organize
those classes into packages. It also makes sense for programmers to
create new packages as toolboxes that provide functionality and APIs for
dealing with areas not covered in the standard Java API. (And in fact such
"toolmaking" programmers often have more prestige than the applications
programmers who use their tools.)</p>

<p>However, with just a couple of exceptions such as class <classname>TextIO</classname>
in package <code>textio</code>, the classes written for this book are not in packages. For the purposes of this
book, you need to know about packages mainly so that you will be able to import <classname>TextIO</classname>
and classes from the standard
packages. The standard packages are always available to the programs that you write.
You might wonder where the standard classes are actually located.  Again, that can
depend to some extent on the version of Java that you are using, but they will be
part of the installed JDK.</p>

<p>Although we won't be creating packages explicitly, <b>every</b>
class is actually part of a package. If a class is not specifically placed in a
package, then it is put in something called the <newword>default package</newword>, 
which has no name.  Almost all the examples that you see in this book
are in the default package.</p>

   
</subsection>

<subsection id="subroutines.5.3a" title="About Modules">

<p>Starting with Java&nbsp;9, a major change was made to the large-scale structure
of Java with the introduction of <newword>modules</newword>.  A module is a collection
of packages, so it represents yet another level of containment:  Modules contain
packages which contain classes which contain variables and methods.  A package
does not have to be in a module to be used, but all of the standard classes in
Java <fx>and in JavaFX</fx> have been divided into a set of modules.</p>

<p>Modules were introduced for several reasons.  A major reason is to provide
better access control.  Before modules, a class that is declared <code>public</code>
can be used anywhere, from any class in any package, as can its public variables 
and methods.  For a class that is defined in a module, on the other hand, "public" only automatically means
public within the module where it is defined.  However, a module can explicitly
<newword>export</newword> a package.  Exporting a package from a module makes the
public classes in the package accessible from anywhere, including from other
modules and from classes that are not part of any module. (It is even possible
to export a package just to certain specified modules, providing an even
finer level of access control.)  The upshot is that it is now possible to have
entire packages that are essentially private: They provide services to other
packages in the same module, but are invisible from outside that module.  So
a module is another kind of black box, and a non-exported package is part of
its hidden implementation.  Of course, modularity on this scale is really only
important for very large-scale applications.</p>

<p>Another motivation for modules is the sheer size of the standard JRE (Java Runtime
Environment), which includes all of the standard classes.  A given application will
use only a small part of the standard runtime.  Modularization makes it possible
to construct smaller, custom JREs that contain only the modules that are required
by an application.  The JDK includes a <i>jlink</i> command for making custom 
runtimes, which can include modules that define an application as well as the
standard modules that are required to run that application.  That runtime
can then be distributed as a standalone application that can be executed even
by people who have not installed a JDK on their computer.  But just as for
the JDK itself, different versions of the custom runtime will be needed for Windows,
for MacOS, and for Linux.  Furthermore, when security updates are made
to the JDK, they are not automatically applied to custom runtimes, so the
application developer takes on the responsibility of updating custom
runtimes.  Once again, this is really only useful for fairly large applications.</p>

<p>In a JDK for Java&nbsp;9 or later, compiled class files from the standard modules 
are stored together in a file named <i>modules</i> inside a directory named 
<i>lib</i> in the main JDK directory.  This is a so-called "jimage file,"
and there is a command-line tool named <i>jimage</i> for working with such files.
If you use the <i>jlink</i> tool to create a custom runtime, part of what it does
is to create a custom <i>modules</i> file containing just the modules that are
needed by the runtime.  In the JDK&nbsp;17 on my Linux computer, <i>modules</i>
is a 127 megabyte file containing 26401 classes in 835 packages in 70 modules.
The JDK directory also has a subdirectory named <i>jmods</i> that contains the
modules in another form.  However, it is not required for compiling and running
programs and, as far as I can tell, is meant mostly for use by <i>jlink</i>.</p>

<p>Modules in the JDK include, for example, <i>java.base</i> (which contains the basic modules
such as <code>java.lang</code> and <code>java.util</code>) and <code>java.desktop</code>
(which include packages for the Swing GUI toolkit).  <fx>JavaFX packages include 
<i>javafx.base</i>, <i>javafx.control</i>, <i>javafx.graphics</i>, and a few that are less
generally useful.</fx> The API documentation for modular versions of Java is divided into
modules, then into packages, and finally into classes.  This makes the documentation harder to browse
than in older versions of Java.  However, the documentation web site does have an effective
search feature.  As I write this, the documentation for Java&nbsp;17<fx> and for
JavaFX&nbsp;17 is available at</fx>:</p>

<p align="center"><a href="https://docs.oracle.com/en/java/javase/17/docs/api/index.html">https://docs.oracle.com/en/java/javase/17/docs/api/index.html</a></p>

<fxdiv>
<p align="center"><a href="https://openjfx.io/javadoc/17/">https://openjfx.io/javadoc/17/</a></p>
</fxdiv>

<p>A class can be defined outside of any module, and it is possible for that class
to use packages from modules, provided that those packages are exported by the
modules where they are defined.  In particular, a programmer can use classes from 
the JDK without ever thinking about modules or knowing that they exist.  This
applies to all the <fx>command-line</fx> programs in this book.<fx>  However, when using
Java&nbsp;9 or later, things are different for GUI programs that use JavaFX,
which has been removed from the JDK and is distributed as a separate set of
modules.  As we saw in <localref href="basics.6"/>, when you compile or run
a JavaFX program, you need to specify a module path that includes the JavaFX
modules, and you need to provide an <code>--add-modules</code> option.
(In <localref href="basics.6"/>, the value for
<code>--add-modules</code> was given as <code>ALL-MODULE-PATH</code>, which
lets the program access any modules that are found on the module path.  
An alternative is to specify a list of names of just those modules that
are actually used by the program.)</fx></p> 

<p>Aside from <fx>using modules with JavaFX and</fx>
the basic background information in this section, this textbook does not 
cover modules.</p>


</subsection>

   
<subsection id="subroutines.5.4" title="Javadoc">
   
<p>To use an API effectively, you need good documentation for it.  The documentation for
most Java APIs is prepared using a system called <newword>Javadoc</newword>.  For example,
this system is used to prepare the documentation for Java's standard packages.  And almost
everyone who creates a toolbox in Java publishes Javadoc documentation for it.</p>
   
<p>Javadoc documentation is prepared from special comments that are placed in the Java
source code file.  Recall that one type of Java comment begins with <code>/*</code> and ends with&nbsp;<code>*/</code>.
A Javadoc comment takes the same form, but it begins with <code>/**</code> rather than simply&nbsp;<code>/*</code>.
You have already seen comments of this form in many of the examples in this book.</p>
      
<p>Note that a Javadoc comment must be placed just <b>before</b> the subroutine that
it is commenting on.  This rule is always followed.  You can have Javadoc
comments for subroutines, for member variables, and for classes.  The Javadoc
comment always <b>immediately precedes</b> the thing it is commenting on.</p>

<p>Like any comment, a Javadoc comment is ignored by the computer when the file is compiled.
But there is a tool called <code>javadoc</code> that reads Java source code files, extracts
any Javadoc comments that it finds, and creates a set of Web pages containing the comments
in a nicely formatted, interlinked form.  By default, <code>javadoc</code> will only collect
information about <code>public</code> classes, subroutines, and member variables, but
it allows the option of creating documentation for non-public things as well.  If
<code>javadoc</code> doesn't find any Javadoc comment for something, it will construct
one, but the comment will contain only basic information such as the name and type
of a member variable or the name, return type, and parameter list of a subroutine.
This is <b>syntactic</b> information.  To add information about semantics and pragmatics,
you have to write a Javadoc comment.</p>
   
<p>As an example, you can look at the documentation Web page for <classname>TextIO</classname><web> by
following this link: <a href="../TextIO_Javadoc/index.html">TextIO&nbsp;Javadoc&nbsp;documentation</a></web>.
The documentation page was created by applying the <code>javadoc</code> tool
to the source code file, <sourceref href="textio/TextIO.java">TextIO.java</sourceref>.  If you have downloaded the on-line
version of this book, the documentation can be found in the <code>TextIO_Javadoc</code>
directory<tex>, or you can find a link to it in the on-line version of this section</tex>.</p>

<p>In a Javadoc comment, the <code>*</code>'s at the start of each line are optional.
The <code>javadoc</code> tool will remove them.  In addition to normal text, the comment
can contain certain special codes.  For one thing, the comment can contain
<newword>HTML mark-up</newword> commands.  HTML is the language that is used to
create web pages, and Javadoc comments are meant to be shown on web pages.  The
<code>javadoc</code> tool will copy any HTML commands in the comments to the web
pages that it creates.  The book will not teach you HTML, but as 
an example, you can add <code>&lt;p&gt;</code> to indicate the start of
a new paragraph.  (Generally, in the absence of HTML commands, blank lines and
extra spaces in the comment are ignored.  Furthermore, the characters &amp; and
&lt; have special meaning in HTML and should not be used in Javadoc comments except
with those meanings; they can be written as <code>&amp;amp;</code> and&nbsp;<code>&amp;lt;</code>.)</p>
   
<p>In addition to HTML commands, Javadoc comments can include <newword>doc tags</newword>,
which are processed as commands by the <code>javadoc</code> tool.  A doc tag has a
name that begins with the character&nbsp;<code>@</code>.  I will only discuss four
tags:  <code>@author</code>, <code>@param</code>, <code>@return</code>, and <code>@throws</code>.
The <code>@author</code> tag can be used only for a class, and should be followed by the
name of the author.  The other three
tags are used in Javadoc comments for a subroutine to provide information about its
parameters, its return value, and the exceptions that it might throw. These tags
<b>must</b> be placed at the end of the comment, after any description of the subroutine
itself.  The syntax for using them is:
</p>

<pre>@param  <bnf>parameter-name</bnf>   <bnf>description-of-parameter</bnf>
   
@return  <bnf>description-of-return-value</bnf>
   
@throws  <bnf>exception-class-name</bnf>   <bnf>description-of-exception</bnf></pre>
   
<np>The <bnf>descriptions</bnf> can extend over several lines.  The description ends at
the next doc tag or at the end of the comment.  You can include a <code>@param</code> tag for
every parameter of the subroutine and a <code>@throws</code> for as many types of exception
as you want to document.  You should have a <code>@return</code> tag only for a
non-void subroutine.  These tags do not have to be given in any particular order.</np>

<p>Here is an example that doesn't do anything
exciting but that does use all three types of doc tag:</p>
   
<pre>/**
 * This subroutine computes the area of a rectangle, given its width
 * and its height.  The length and the width should be positive numbers.
 * @param width the length of one side of the rectangle
 * @param height the length the second side of the rectangle
 * @return the area of the rectangle
 * @throws IllegalArgumentException if either the width or the height
 *    is a negative number.
 */
public static double areaOfRectangle( double length, double width ) {
    if ( width &lt; 0  ||  height &lt; 0 )
       throw new IllegalArgumentException("Sides must have positive length.");
    double area;
    area = width * height;
    return area; 
}</pre>
   
<p>I use Javadoc comments for many of my examples.  I encourage you to use
them in your own code, even if you don't plan to generate Web page documentation
of your work, since it's a standard format that other Java programmers will be
familiar with.</p>

<p>If you do want to create Web-page documentation, you need to run the
<code>javadoc</code> tool.  This tool is available as a command in the Java Development
Kit that was discussed in <localref href="basics.6"/>.  You can use the <code>javadoc</code> tool
in a command line interface similarly to the way that the <code>javac</code> and
<code>java</code> commands are used.  Javadoc can also be applied in the
integrated development environments that were also discussed in 
<localref href="basics.6"/>.  I won't go into any of the details here; consult the
documentation for your programming environment.</p>
   
</subsection>

   
<subsection id="subroutines.5.5" title="Static Import">

<p>Before ending this section, I will mention an extension of the <code>import</code> directive.
We have seen that <code>import</code> makes it possible to refer to a class
such as <code>java.util.Scanner</code> using its simple name, <classname>Scanner</classname>.
But you still have to use compound names to refer to static member variables such
as <code>System.out</code> and to static methods such as <code>Math.sqrt</code>.</p>
   
<p>There is another form of the <code>import</code> directive that can
be used to import <code>static</code> members of a class in the same way that
the ordinary <code>import</code> directive imports classes from a package.
That form of the directive is called a <newword>static import</newword>,
and it has syntax</p>
   
<pre>import static <bnf>package-name</bnf>.<bnf>class-name</bnf>.<bnf>static-member-name</bnf>;</pre>
   
<np>to import one static member name from a class, or</np>
   
<pre>import static <bnf>package-name</bnf>.<bnf>class-name</bnf>.*;</pre>
   
<np>to import all the public static members from a class.  For example, if you preface
a class definition with</np>
   
<pre>import static java.lang.System.out;</pre>
   
<np>then you can use the simple name <code>out</code> instead of the compound name <code>System.out</code>.
This means you can say <code>out.println</code> instead of <code>System.out.println</code>.  If you
are going to work extensively with the <classname>Math</classname> class, you might preface
your class definition with</np>
   
<pre>import static java.lang.Math.*;</pre>
   
<np>This would allow you to say <code>sqrt</code> instead of <code>Math.sqrt</code>, <code>log</code>
instead of <code>Math.log</code>, <code>PI</code> instead of <code>Math.PI</code>, and so on.  And you
could import the <i>getlnInt</i> function from <classname>TextIO</classname> using</np>

<pre>import static textio.TextIO.getlnInt;</pre>

<p>Note that the static import directive requires a <bnf>package-name</bnf>, even for classes in
the standard package <code>java.lang</code>.  One consequence of this is that you can't do a 
static import from a class in the default package.</p>


</subsection>
   


</section>