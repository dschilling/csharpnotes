<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE quiz SYSTEM "../csharpnotes1.dtd" >

<quiz>
   
<question>
<ques><p>What is meant by <i>generic
programming</i> and what is the alternative?</p>
</ques>
<ans><p>Generic programming means
writing data structures and subroutines that can be used for many different
types of data. The alternative would be to write a new data structure or
subroutine for each different type of data, even when they would all be
essentially identical except for the type name. For example, a single generic
sort routine can be used for sorting lists that contain data of any type.
The alternative is one routine for sorting lists of integers, one for sorting
lists of strings, one for storing arrays of real numbers, and so on.</p>
</ans>
</question>
   
   
<question>
<ques><p>Why can't you make an object of type <classname>LinkedList&lt;int&gt;</classname>?
What should you do instead?</p>
</ques>
<ans><p><classname>LinkedList&lt;int&gt;</classname> is an attempt to use a generic
class with a type parameter of type <ptype>int</ptype>, which is a primitive type.
Generic programming in Java works only for objects, and not for the primitive types,
so a type parameter of primitive type is not allowed.  However, it is possible
to use the wrapper class <classname>Integer</classname> in place of <ptype>int</ptype>.
An object of type <classname>LinkedList&lt;Integer&gt;</classname> can be used almost
as if it were actually a list of <ptype>ints</ptype>.</p>
</ans>
</question>
   
   
<question>
<ques><p>What is an <i>iterator</i>
and why are iterators necessary for generic programming?</p>
</ques>
<ans><p>One of the principle features of
Java's generic programming framework is <classname>Collections</classname>. There are several types of
collection (including <classname>LinkedList</classname>, <classname>ArrayList</classname>, 
<classname>TreeSet</classname>, and <classname>HashSet</classname>). In order
to deal with all the different types of collection in a generic way, we need a
generic way to access all the elements in a collection. An iterator makes this
possible. An iterator is an object associated with a collection that makes it
possible to traverse the collection (that is, to visit each of the items in the
collection in turn). Code written using iterators will work for any type of
collection.  (Note, however, that explicit use of an iterator can often be
avoided by using a for-each loop.)</p>
</ans>
</question>
   
   
<question>
<ques><p>Suppose that
<code>integers</code> is a variable of type <classname>Collection&lt;Integer&gt;</classname>.
Write a code segment that uses an iterator to compute the sum of all the integer values in 
the collection.  Write a second code segment that does the same thing using a
for-each loop.</p>
</ques>
<ans><p>Using an iterator:</p>
<pre>int sum = 0;
Iterator&lt;Integer&gt;  iter = integers.iterator();
while ( iter.hasNext() ) {
   sum += iter.next();
}</pre>
<np>The statement "<code>sum += iter.next()</code>" relies on the automatic conversion
from type <classname>Integer</classname> to type <ptype>int</ptype>.  It could
also be written "<code>sum += iter.next().intValue()</code>".</np>
<p>Using a for-each loop:</p>
<pre>int sum = 0;
for ( int number : integers ) {   // ( Could also use "Integer number : integers". )
   sum += number;
}</pre>
<np>Note that either of these two solutions will fail if <code>integers</code>
contains a <code>null</code> value.</np>
</ans>
</question>
   
   
<question>
<ques><p>Interfaces such as
<classname>List</classname>, <classname>Set</classname>, and <classname>Map</classname> 
define <i>abstract data types.</i> Explain what this means.</p>
</ques>
<ans><p>An abstract data type is defined
by the operations that can be performed on it, not by the way the data is
actually stored or by the way the operations are implemented. An interface such
as <classname>List</classname> defines operations that can be performed, but says nothing
about how they are to be implemented. In fact, there can be many different
implementations. For example, both <classname>LinkedList</classname> and <classname>ArrayList</classname>
implement the <classname>List</classname> interface. They are different "concrete" data types
that implement the same abstract data type.</p>
</ans>
</question>
   
   
<question>
<ques><p>What is the fundamental
property that distinguishes <classname>Sets</classname> from other types of
<classname>Collections</classname>?</p>
</ques>
<ans><p>A <classname>Set</classname> cannot contain
duplicate elements.  Adding an item to the
set has no effect if that item is already in the set.  (Note that exactly what it means to say that two
items are the same depends on the type of set.  For <classname>HashSet</classname>,
two items are tested for equality using the <code>equals()</code> method.
For a <classname>TreeSet</classname>, the test for equality uses the
<code>compareTo()</code> method from the <classname>Comparable</classname> interface
or the <code>compare()</code> method from a <classname>Comparator</classname>.)</p>
</ans>
</question>
   
   
<question>
<ques><p>What is the essential
difference in functionality between a <classname>TreeMap</classname> and a
<classname>HashMap</classname>?</p>
</ques>
<ans><p>The key/value pairs in a
<classname>TreeMap</classname> are sorted so that the keys are in ascending order. (For this
reason, it must be possible to compare the keys in a <classname>TreeMap</classname>, using
a <code>compareTo()</code> method or <code>compare()</code>.  Either the keys must implement the
<classname>Comparable</classname> interface or a <classname>Comparator</classname> must
be provided to do the comparison.)</p>
</ans>
</question>
   
   
<question>
<ques><p>Explain what is meant by a <i>hash code.</i></p>
</ques>
<ans><p>The hash code of an object is an
integer that tells where that object should be stored in a hash table. A hash
table is an array of linked lists. When an object is stored in a hash table, it
is added to one of these linked lists. The object's hash code is the index of
the position in the array where the object is stored. All objects with the same
hash code go into the same linked list.  In Java, every object <code>obj</code> has a method
<code>obj.hashCode()</code> that is used to compute hash codes for the object.
If the object is to be stored in a hash table of size <code>N</code>, then
the hash code that is used for the object is <code>Math.abs(obj.hashCode())&nbsp;%&nbsp;N</code>.</p>
</ans>
</question>
   
   
<question>
<ques><p>Modify the following
<classname>Date</classname> class so that it implements the interface <classname>Comparable&lt;Date&gt;</classname>.
The ordering on objects of type <classname>Date</classname> should be the natural,
chronological ordering.</p>
<pre>class Date {
   int month;  // Month number in range 1 to 12.
   int day;    // Day number in range 1 to 31.
   int year;   // Year number.
   Date(int m, int d, int y) { 
      month = m;
      day = d;
      year = y;
   }
}</pre>
<np>Also, rewrite the resulting <classname>Date</classname> class as a record class.
(See <localref href="arrays.3a"/>.)</np>
</ques>
<ans><p>The interface <classname>Comparable&lt;Date&gt;</classname> specifies the method
<code>"public int compareTo(Date d)"</code>, which will be used to compare
two objects of type <classname>Date</classname>. The
<code>compareTo()</code> method 
must be added to the class, and the class must be declared to implement the
interface. To compare two dates, first try comparing the
years. If the years are equal, try comparing the months. If the months are also
equal, compare the days.</p>
<pre>class Date implements Comparable&lt;Date&gt; {
   int month;  // Month number in range 1 to 12.
   int day;    // Day number in range 1 to 31.
   int year;   // Year number.
   Date(int m, int d, int y) {
      month = m;
      day = d;
      year = y;
   }
   public int compareTo( Date otherDate ) {
           // Returns 1, 0, or -1 if this date is greater than, equal to,
           // or less than otherDate, respectively.
      if (year &lt; otherDate.year)
         return -1;
      else if (year &gt; otherDate.year)
         return 1;
      else { // Years are equal; compare months.
         if (month &lt; otherDate.month)
            return -1;
         else if (month &gt; otherDate.month)
            return 1;
         else { // Years and months are equal; compare days.
            if (day &lt; otherDate.day)
               return -1;
            else if (day &gt; otherDate.day)
               return 1;
            else 
               return 0;
         }
      }
   }
}</pre>
<p>When this class is rewritten as a record class, the class's instance variables
are listed in parentheses after the class name, and a canonical constructor
is automatically provided.  However, the <classname>Comparable</classname>
interface is added to the class in the same way.  Record classes cannot
extend other classes, but they can implement interfaces.  Of course, this
record class could use many other improvements&dots;</p>
<pre>record Date(int month, int day, int year)
                        implements Comparable&lt;Date&gt; {
   public int compareTo( Date otherDate ) {
           // Returns 1, 0, or -1 if this date is greater than, equal to,
           // or less than otherDate, respectively.
      if (year &lt; otherDate.year)
         return -1;
      else if (year &gt; otherDate.year)
         return 1;
      else { // Years are equal; compare months.
         if (month &lt; otherDate.month)
            return -1;
         else if (month &gt; otherDate.month)
            return 1;
         else { // Years and months are equal; compare days.
            if (day &lt; otherDate.day)
               return -1;
            else if (day &gt; otherDate.day)
               return 1;
            else 
               return 0;
         }
      }
   }
}</pre>
</ans>
</question>
   
   
<question>
<ques><p>Suppose that
<code>syllabus</code> is a variable of type <classname>TreeMap&lt;Date,String&gt;</classname>,
where <classname>Date</classname> is the class from the preceding exercise.
Write a code segment that will write
out the value string for every key that is in the month of December, 2021.</p>
</ques>
<ans><p>I will give two solutions. One
of them simply looks up each date in December, 2021 in the map and prints the
corresponding value, if there is one. The other iterates though a submap that
contains all the entries for dates in that month.</p>
<pre>
A solution using the map's get() method:

      for (int day = 1; day &lt;= 31; day++) {
           // Get the info for one day in December, 2021
         Date date = new Date(12,day,2021); // The key.
         String info = syllabus.get(date);  // Get the value for that key.
                                            // (Can be null if there is no
                                            // entry in the map for this date.)
         if (info != null)
            System.out.println("December " + day + ": " + info);
      }


A solution using a submap (harder, but more efficient):

      Date startDate = new Date(12,1,2021); // Starting date for submap.
      Date endDate = new Date(1,1,2022);    // Ending date for submap.
                                            // (Remember that the end date
                                            // is not included.)
      Map&lt;Date,String&gt; decemberData = syllabus.subMap(startDate, endDate);
      for ( Map.Entry&lt;Date,String&gt; entry : decemberData ) {
         Date date = entry.getKey();
         String info = entry.getValue();
         System.out.println("December " + date.day + ": " + info);
      }

Using <code>var</code> to declare local variables, this could also be written:

      Date startDate = new Date(12,1,2021); // Starting date for submap.
      Date endDate = new Date(1,1,2022);    // Ending date for submap.
                                            // (Remember that the end date
                                            // is not included.)
      <newcode>var</newcode> decemberData = syllabus.subMap(startDate, endDate);
      for (<newcode>var</newcode> entry : decemberData ) {
         Date date = entry.getKey();
         String info = entry.getValue();
         System.out.println("December " + date.day + ": " + info);
      }</pre>
</ans>
</question>
   
   
<question>
<ques><p>Write a generic class <classname>Stack&lt;T&gt;</classname> that can be
used to represent stacks of objects of type <classname>T</classname>.  The class
should include methods <code>push()</code>, <code>pop()</code>, and
<code>isEmpty()</code>.  Inside the class, use an <classname>ArrayList</classname>
to hold the items on the stack.</p>
</ques>
<ans><pre>public class Stack&lt;T&gt; {
   ArrayList&lt;T&gt; stack = new ArrayList&lt;T&gt;();
   public void push( T newItem ) {
      stack.add(newItem);
   }  
   public T pop() {
      if ( isEmpty() ) {
          throw new IllegalStateException("Can't pop from an empty stack");
      }
      int top = stack.size() - 1;  // location of top item
      return stack.remove(top);    // remove and return top item
   }
   public boolean isEmpty() {
      return stack.size() == 0;
   }
}</pre></ans>
</question>
   
   
<question>
<ques><p>Write a generic method, using a generic type parameter <code>&lt;T&gt;</code>,
that replaces every occurrence in an <classname>ArrayList&lt;T&gt;</classname> of a specified item
with a specified replacement item.  The list and the two items are parameters to the method.
Both items are of type <classname>T</classname>.
Take into account the fact that the item that is being replaced might be <code>null</code>.
For a non-null item, use <code>equals()</code> to do the comparison.</p>
</ques>
<ans><p>Since the method operates on <classname>ArrayLists</classname>, it can
use indexed access with the <code>get(i)</code> and <code>set(i,item)</code> methods.
These operations are efficient for array lists.  I also give a second version of
the method that uses a list iterator and is efficient for any type of list.</p>
<pre>public static &lt;T&gt; void replaceAll(ArrayList&lt;T&gt; list, T oldItem, T newItem) {
   if (oldItem == null) {
      for (int i = 0; i &lt; list.size(); i++) {
         if ( null == list.get(i) )
            list.set( i, newItem );
      }
   }
   else {
      for (int i = 0; i &lt; list.size(); i++) {
         if ( oldItem.equals(list.get(i)) )
            list.set( i, newItem );
      }
   }
}


public static &lt;T&gt; void replaceAll(List&lt;T&gt; list, T oldItem, T newItem) {
   ListIterator&lt;T&gt; iter = list.listIterator();
   while (iter.hasNext()) {
      T listItem = iter.next();
      if ( oldItem == null ) {
         if ( listItem == null )
            iter.set(newItem);
      }
      else {
         if ( oldItem.equals(listItem) )
            iter.set(newItem);
      }
   }
}</pre>
<p>(Note, by the way, that a <code>replaceAll</code> method is already defined
as a static method in class <classname>Collections</classname>.)</p>
</ans>
</question>
   
<question>
<ques><p>Suppose that <code>words</code> is an array of <classname>Strings</classname>.
Explain what is done by the following code:</p>
<pre>long n = Arrays.stream(words)
               .filter( w -> (w != null) )
               .map( w -> w.toLowerCase() )
               .distinct()
               .count();</pre>
</ques>
<ans><p>This code counts the number of different strings in the array, ignoring
case.  It starts with a stream containing all the strings from the array.
The <code>filter()</code> operation only lets non-null values through.
This makes sure that there won't be a <code>NullPointerExcetion</code>
in the next step, when <code>w.toLowerCase()</code> is evaluated.
The <code>map()</code> replaces each string in the stream with a lower case
version, so that there will be no difference between upper and lower case
versions of the same string.  The <code>distinct() eliminates duplicates
from the stream.  And <code>count()</code> returns the number of strings
in the resulting. stream, which now contains just one lower-case copy
of every string that occurs in the array.</code></p>
</ans>
</question>

<question>
<ques><p>Use the stream API to print all the even integers from 2 to 20.
Start with <code>IntStream.range</code> and apply a
<code>filter</code> operation.</p>
</ques>
<ans>
<pre>IntStream.range(2,20)
         .filter( n -> (n % 2 == 0) )
         .forEach( n -> System.out.println(n) );</pre>
              
<p>(<code>IntStream.range()</code> can be used to create a stream
containing all of the integers 2 to 20.  The predicate
"<code>n&nbsp;->&nbsp;(n%2&nbsp;==&nbsp;0)</code>" is true just for
even integers, so the stream that emerges from the <code>filter</code>
operation contains the numbers 2, 4, &dots; 20.  Finally, we can
apply an operation to each of the numbers of the stream by using
the <code>forEach</code> terminal operator.  The operation
<code>forEachOrdered</code> would also work, but since the stream
is sequential, <code>forEach</code> will print out the numbers in 
order.  If we were using a parallel stream, it is possible that
<code>forEach</code> could print the numbers out of order.)</p>
</ans>
</question>

<question>
<ques><p>Write a generic method <code>countIf(c,t)</code> with
type parameter <code>&lt;T&gt;</code>, where the first parameter,
<code>c</code>, is of type <atype>Collection&lt;T&gt;</atype>,
and the second parameter, <code>p</code>, is of type
<atype>Predicate&lt;T&gt;</atype>.  The method should return
the number of items in the collection for which the predicate
is true.  Give two versions, one using a loop and the other
using the stream API.</p>
</ques>
<ans><p>The first version uses a for-each loop, and uses the fact that
a <classname>Predicate</classname> contains a <ptype>boolean</ptype>-valued
function named <code>test()</code> for testing whether the predicate is
true:</p>

<pre>public static &lt;T&gt; int countIf( Collection&lt;T&gt; items, Predicate&lt;T&gt; pred ) ) {
    int count = 0;
    for ( T x : items ) {
        if ( pred.test(x) )
            count++;
    }
    return count;
}</pre>

<p>The second version uses the stream API, with a <code>filter()</code> operation
that lets through only the items for which the predicate is true.  Note that
<code>filter()</code> takes a parameter that is a predicate.  Usually, the
parameter is given by a lambda expression, but in this case, the predicate is
<code>pred</code>, so we need to pass <code>pred</code> as the paramter
to <code>filter()</code>.</p>

<pre>public static &lt;T&gt; int countIf( Collection&lt;T&gt; items, Predicate&lt;T&gt; pred ) {
    long ct = items.parallelStream()
                   .filter(pred)
                   .count();
         // .count() returns a long, but I want countIf to return an int
    return (int)ct; 
}</pre>
</ans>
</question>
   
</quiz>