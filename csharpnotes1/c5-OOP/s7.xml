<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section SYSTEM "../csharpnotes1.dtd" >

<section id="OOP.7" title="Interfaces">


<p>Some object-oriented programming languages, such as C++, allow a class to
extend two or more superclasses. This is called <newword>multiple inheritance</newword>. 
In the illustration below, for example, class&nbsp;E is shown as
having both class&nbsp;A and class&nbsp;B as direct superclasses, while class&nbsp;F has three
direct superclasses.</p>

<img width="422" height="301" src="multiple-inheritance.png" alt="class hierarchy diagram with multiple inheritance"
    tex="multiple-inheritance.eps" texscale="0.6"/>
   
<p>Such multiple inheritance is <b>not</b> allowed in Java. The
designers of Java wanted to keep the language reasonably simple, and felt that
the benefits of multiple inheritance were not worth the cost in increased
complexity. However, Java does have a feature that can be used to accomplish
many of the same goals as multiple inheritance: <newword>interfaces</newword>.
We have already encountered "functional interfaces" in <localref href="subroutines.4a"/>
in connection with lambda expressions.  A functional interface specifies
a single method.  However, interfaces can be much more complicated than
that, and they have many other uses.
</p>

<p>You are not likely to need to write your own interfaces until you get to the
point of writing fairly complex programs. However, there are several interfaces
that are used in important ways in Java's standard packages, and you will need
to learn how to use them.</p>


<subsection id="OOP.7.1" title="Defining and Implementing Interfaces">


<p>We encountered the term "interface" in other contexts, in connection with black
boxes in general and subroutines in particular. The interface of a subroutine
consists of the name of the subroutine, its return type, and the number and
types of its parameters. This is the information you need to know if you want
to call the subroutine. A subroutine also has an implementation: the block of
code which defines it and which is executed when the subroutine is called.</p>

<p>In Java, <code>interface</code> is a reserved word with an additional, technical
meaning. An "<code>interface</code>" in this sense consists of a set of instance method
interfaces, without any associated implementations.  (Actually, a Java interface
can contain other things as well, as we'll see later.)
A class can <newword>implement</newword> 
an <code>interface</code> by providing an implementation
for each of the methods specified by the interface. Here is an example of a
very simple Java <code>interface</code>:</p>

<pre>public interface Strokeable {
   public void stroke(Graphics<fx>Context</fx> g);
}</pre>

<np>This looks much like a class definition, except that the implementation of
the <code>stroke()</code> method is omitted. A class that implements the
<code>interface</code> <classname>Strokeable</classname> must provide an implementation for
<code>stroke()</code>. Of course, the class can also include other methods and variables. For
example,</np>

<pre>public class Line implements Strokeable {
    public void stroke(Graphics<fx>Context</fx> g) {
        . . . // do something&mdash;presumably, draw a line
    }
    . . . // other methods, variables, and constructors
}</pre>

<np>Note that to implement an interface, a class must do more than simply provide
an implementation for each method in the interface; it must also <b>state</b> that
it implements the interface, using the reserved word <code>implements</code> as
in this example: "<code>public class Line <b>implements</b> Strokeable</code>".
Any concrete class that implements the <classname>Strokeable</classname> interface must define a
<code>stroke()</code> instance method. Any object created from such a class includes
a <code>stroke()</code> method. We say that an <b>object</b> implements an
<code>interface</code> if it belongs to a class that implements the interface. For
example, any object of type <classname>Line</classname> implements the <classname>Strokeable</classname>
interface.</np>

<p>While a class can <b>extend</b> only one other class, it can
<b>implement</b> any number of interfaces. In fact, a class can both extend
one other class and implement one or more interfaces.  So, we can have things
like</p>

<pre>class FilledCircle extends Circle 
                        implements Strokeable, Fillable {
   . . .
}</pre>

<p>The point of all this is that, although interfaces are not classes, they are
something very similar. An interface is very much like an abstract class, that
is, a class that can never be used for constructing objects, but can be used as
a basis for making subclasses. The subroutines in an interface are abstract
methods, which must be implemented in any concrete class that implements the
interface.  You can compare the <classname>Strokeable</classname>
interface with the abstract class</p>

<pre>public abstract class AbstractStrokeable {
   public abstract void stroke(Graphics<fx>Context</fx> g);
}</pre>

<np>The main difference is that a class that extends <classname>AbstractStrokeable</classname>
cannot extend any other class, while a class that implements <classname>Strokeable</classname>
can also extend some class, as well as implement other interfaces.  Of course, an
abstract class can contain non-abstract methods as well as abstract methods.
An interface is like a "pure" abstract class, which contains only abstract methods.</np>

<p>Note that the methods declared in an interface must be <code>public</code> and <code>abstract</code>.  In fact,
since that is the only option, it is not necessary to specify either of these modifiers in
the declaration.</p>

<p>In addition to method declarations, an interface can also include variable
declarations.  The variables must be <code>"public static final"</code>
and effectively become public static final variables in every class that implements
the interface.  In fact, since the variables can only be public and static and final,
specifying the modifiers is optional.  For example,</p>

<pre>public interface ConversionFactors {
    int INCHES_PER_FOOT = 12;
    int FEET_PER_YARD = 3;
    int YARDS_PER_MILE = 1760;
}</pre>

<np>This is a convenient way to define named constants that can be
used in several classes.  A class that implements <classname>ConversionFactors</classname>
can use the constants defined in the interface as if they were defined in the
class.</np>

<p>Note in particular that any variable that is defined in an interface is
a constant.  It's not really a variable at all.  An interface <b>cannot</b> add
instance variables to the classes that implement it.</p>

<p>An interface can extend one or more other interfaces.  For example, if 
<classname>Strokeable</classname> is the interface given above and <classname>Fillable</classname>
is an interface that defines a method <code>fill(g)</code>, then we could define</p>

<pre>public interface Drawable extends Strokeable, Fillable {
    // (more methods/constants could be defined here)
}</pre>

<np>A concrete class that implements <classname>Drawable</classname> must then
provide implementations for the <code>stroke()</code> method from 
<classname>Strokeable</classname> and the <code>fill()</code> method from
<classname>Fillable</classname>, as well as for any abstract methods specified
directly in the <classname>Drawable</classname> interface.</np>

<p>An <code>interface</code> is usually defined in its own .java file, whose
name must match the name of the <code>interface</code>.  For example, 
<classname>Strokeable</classname> would be defined in a file named
<code>Strokeable.java</code>.  Just like a <code>class</code>, an
<code>interface</code> can be in a package and can <code>import</code>
things from other packages.</p>

<p>This discussion has been about the syntax rules for <code>interfaces</code>.
But of course, an <code>interface</code> also has a semantic component.  That is,
the person who creates the <code>interface</code> intends for the methods that
it defines to have some specific meaning.  The <code>interface</code> definition
should include comments to express that meaning, and classes that implement the
<code>interface</code> should take that meaning into account.  The Java compiler,
however, can only check the syntax; it can't enforce the meaning.  For example,
the <code>stroke()</code> method in an object that implements <classname>Strokeable</classname>
is presumably meant to draw a graphical representation of the object by
stroking it<swing> (that is, by dragging a pen along its outline)</swing>,
but the compiler can only check that the <code>stroke()</code> method exists
in the object.</p>

</subsection>

<subsection id="OOP.7.1a" title="Default Methods">

<p>Starting in Java 8, interfaces can contain <classname>default methods</classname>.
Unlike the usual abstract methods in interfaces, a default method has an implementation.  When a class
implements the interface, it does not have to provide an implementation for the
default method&mdash;although it can do so if it wants to provide a different implementation.
Essentially, default methods are inherited from interfaces in much the same way that
ordinary methods are inherited from classes.  This moves Java partway towards supporting
multiple inheritance.  It's not true multiple inheritance, however, since interfaces
still cannot define instance variables.  Default methods can call abstract methods that
are defined in the same interface, but they cannot refer to any instance variables.</p>

<p>Note that a functional interface can include default methods in addition to
the single abstract method that it specifies.</p>

<p>A default method in an interface must be marked with the modifier <code>default</code>.
It can optionally be marked <code>public</code> but, as for everything else in interfaces,
default methods are automatically public and the <code>public</code> modifier can be omitted.
Here is an example:</p>

<pre>public interface Readable { // represents a source of input

    public char readChar();  // read the next character from the input

    default public String readLine() { // read up to the next line feed
        StringBuilder line = new StringBuilder();
        char ch = readChar();
        while (ch != '\n') {
            line.append(ch);
            ch = readChar();
        }
        return line.toString();
    }

}</pre>

<np>A concrete class that implements this interface must provide an implementation for
<code>readChar()</code>.  It will inherit a definition for <code>readLine()</code> from the interface,
but can provide a new definition if necessary.  When a class includes an implementation
for a <code>default</code> method, the implementation given in the class overrides the
default method from the <code>interface</code>.</np>

<p>Note that the default
<code>readLine()</code> calls the abstract method <code>readChar()</code>,
whose definition will only be provided in an implementing class.  The reference
to <code>readChar()</code> in the definition is polymorphic.
The default implementation of <code>readLine()</code> is one that would make 
sense in almost any class that implements <classname>Readable</classname>.  Here's
a rather silly example of a class that implements <classname>Readable</classname>,
including a <code>main()</code> routine that tests the class. Can you figure out
what it does?</p>


<pre>public class Stars implements Readable {

    public char readChar() {
        if (Math.random() > 0.02)
           return '*';
        else
           return '\n';
    }
    
    public static void main(String[] args) {
        Stars stars = new Stars();
        for (int i = 0 ; i &lt; 10; i++ ) {
            String line = stars.readLine();  // Calls the default method!
            System.out.println( line );
        }
    }
      
}</pre>

<p>Default methods provide Java with a capability similar to something called
a "mixin" in other programming languages, namely the ability to mix functionality from
another source into a class. Since a class can implement several interfaces,
it is possible to mix in functionality from several different sources.</p>

</subsection>

<subsection id="OOP.7.2" title="Interfaces as Types">

<p>As with abstract classes, even though you can't construct an
object from an interface, you can declare a variable whose type is given by the
interface. For example, if <classname>Strokeable</classname> is the interface given above, and if
<classname>Line</classname> and <classname>Circle</classname> are classes that implement
<classname>Strokeable</classname>, as above, then you could say:</p>

<pre>Strokeable figure;  // Declare a variable of type Strokeable.  It
                    //    can refer to any object that implements the
                    //    Strokeable interface.
                  
figure = new Line();  // figure now refers to an object of class Line
figure.stroke(g);   // calls stroke() method from class Line

figure = new Circle();   // Now, figure refers to an object
                               //   of class Circle.
figure.stroke(g);   // calls stroke() method from class Circle</pre>

<np>A variable of type <classname>Strokeable</classname> can refer to any object of any class
that implements the <classname>Strokeable</classname> interface. A statement like
<code>figure.stroke(g)</code>, above, is legal because <code>figure</code> is of type
<classname>Strokeable</classname>, and <b>any</b> 
<classname>Strokeable</classname> object has a <code>stroke()</code>
method.  So, whatever object <code>figure</code> refers to, that object must
have a <code>stroke()</code> method.</np>

<p>Note that a <newword>type</newword> is something that can be used
to declare variables. A type can also be used to specify the type of a
parameter in a subroutine, or the return type of a function. In Java, a type
can be either a class, an interface, or one of the eight built-in primitive
types. These are the only possibilities (given a few special cases, such
as an <code>enum</code>, which is considered to be a special kind of class).
Of these, however, only classes can be used to construct new objects.</p>

<p>An interface can also be the base type of an array.  For example, we can
use an array type <atype>Strokeable[]</atype> to declare
variables and create arrays.  The elements
of the array can refer to any objects that implement the <classname>Strokeable</classname>
interface:</p>

<pre>Strokeable[] listOfFigures;
listOfFigures = new Strokeable[10];
listOfFigures[0] = new Line();
listOfFigures[1] = new Circle();
listOfFigures[2] = new Line();
  .
  .
  .</pre>
  
  <np>Every element of the array will then have a <code>stroke()</code> method, so that
  we can say things like <code>listOfFigures[i].stroke(g)</code>.</np>

</subsection>
   

</section>