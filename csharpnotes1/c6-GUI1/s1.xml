<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section SYSTEM "../csharpnotes1.dtd" >

<section id="GUI1.1" title="A Basic JavaFX Application">
   
<p><start><big>T</big>he command-line programs</start> that you have
learned how to write would seem very alien to most computer users.
The style of interaction where the user and the computer take turns
typing strings of text seems like something out of the early days
of computing, although it was only in the mid 1980s that home computers
with graphical user interfaces started to become available.  Today,
most people interact with their computers exclusively through a GUI.
A GUI program offers a much richer type of user interface, where the user uses a mouse
and keyboard (or other input devices) to interact with GUI components such as windows, menus, buttons,
check boxes, text input boxes, scroll bars, and so on.</p>

<p>This section introduces some of the basic ideas of programming with
JavaFX by looking at a very simple GUI application.  ("Application" is the
preferred term for "program" in this context.)  The application simply
displays a window containing a message and three buttons.  Here's what the 
window looks like when it first opens:</p>

<img src="HelloWorldFX-screenshot.png" width="450" height="227" tex="HelloWorldFX-screenshot.eps" texscale="0.5" 
      alt="The window from the HelloWorldFX application."/>
      
<np>Clicking "Say Hello" will get the computer to tell you, "Hello World!".
Clicking "Say Goodbye" will change the text of the
message to "Goodbye".  Clicking the "Quit" button will end the application, which can also
be ended by clicking the window's close box.</np>


<subsection id="GUI1.1.1" title="JavaFX Applications">

<p>A JavaFX program (or "application") is represented by an object of type
<classname>Application</classname>, which is defined in the
package <code>javafx.application</code>.  <classname>Application</classname>
is an abstract class, which defines, among other things, one abstract instance method, named <code>start()</code>.
To create a JavaFX program, you need to create
a class that extends <classname>Application</classname> and provides a definition
for the <code>start</code>() method.  (See <localref href="OOP.5.1"/> and <localref href="OOP.5.5"/>.)</p>

<p>The class that you write to create a JavaFX application also typically includes a 
<code>main()</code> method that simply "launches" the application:</p>

<pre>public static void main(String[] args) {
    launch();
}</pre>

<np>(The call to <code>launch()</code> can be replace by <code>launch(args)</code> for an
application that uses command-line arguments (<localref href="subroutines.3.4b"/>), but the parameter is
optional for all of the examples in this book.)
When this <code>main()</code> routine is executed, the <code>launch()</code> method 
creates a new thread, called the <newword>JavaFX application thread</newword>.
Recall from <localref href="overview.2"/> that a thread can execute a sequence of instructions that can be run in parallel 
with other threads.  It is important that anything that affects the GUI be done on
the JavaFX application thread.  That will be pretty much automatic for the things that
we do in this chapter, but it's something that will become important when we cover
threads in <localref href="threads"/> and write some GUI programs that use several threads.
The <code>launch()</code> method then creates the object that represents the application;
that object is an instance of the class that contains the call to the <code>launch()</code>
method.  The <code>start()</code> method of that object is then called on the
JavaFX application thread, and it is the responsibility of that <code>start()</code>
method to set up the GUI and open a window on the screen.</np>

<p>Here, then is our first JavaFX application.  We will spend the rest of this 
section discussing it:</p>

<pre>import javafx.application.Application;
import javafx.scene.Scene;
import javafx.stage.Stage;
import javafx.application.Platform;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.geometry.Pos;
import javafx.scene.control.Label;
import javafx.scene.control.Button;
import javafx.scene.text.Font;

public class HelloWorldFX extends Application {

    public void start(Stage stage) {
        
        Label message = new Label("First FX Application!");
        message.setFont( new Font(40) );
        
        Button helloButton = new Button("Say Hello");
        helloButton.setOnAction( evt -> message.setText("Hello World!") );
        Button goodbyeButton = new Button("Say Goodbye");
        goodbyeButton.setOnAction( evt -> message.setText("Goodbye!!") );
        Button quitButton = new Button("Quit");
        quitButton.setOnAction( evt -> Platform.exit() );

        HBox buttonBar = new HBox( 20, helloButton, goodbyeButton, quitButton );
        buttonBar.setAlignment(Pos.CENTER);
        BorderPane root = new BorderPane();
        root.setCenter(message);
        root.setBottom(buttonBar);
        
        Scene scene = new Scene(root, 450, 200);
        stage.setScene(scene);
        stage.setTitle("JavaFX Test");
        stage.show();
        
    } // end start();
    
    public static void main(String[] args) {
        launch();  // Run this Application.
    }

} // end class HelloWorldFX</pre>

<np>The first thing that you will notice is the large number of <code>imports</code> at
the start of the program, all from subpackages of the <code>javafx</code> package.
A typical JavaFX program uses many classes from such packages.  When I discuss a
JavaFX class for the first time, I will usually mention the package that it comes
from.  But in any case, you can look up the class in the JavaFX API documentation.
As I write this, the documentation for JavaFX&nbsp;17 can be be found at
<a href="https://openjfx.io/javadoc/17/">https://openjfx.io/javadoc/17/</a>.</np>


<p>The <classname>HelloWorldFX</classname> program contains a <code>main</code> method to launch the
application, and it contains the required <code>start()</code> method.  Of course, we will often
add other methods to our application classes, to be called by <code>start()</code>.  There are also a couple other methods
in <classname>Application</classname> that can be overridden.  In particular, there is an
<code>init()</code>, that will be called by the system before <code>start()</code>, and a <code>stop()</code>
method that is called by the system when the application is shutting down.  These two methods are
defined in class <classname>Application</classname> to do nothing.  A programmer can redefine <code>init()</code>
to do some initialization and <code>stop()</code> to do cleanup.  However, we will rarely if ever need them.
Any initialization that we need can be done in <code>start()</code>.</p>

</subsection>

<subsection id="GUI1.1.2" title="Stage, Scene, and SceneGraph">
   
<p>The <code>start()</code> method has a parameter of type <classname>Stage</classname>,
from package <code>javafx.stage</code>.
A <classname>Stage</classname> object represents a window on the computer's screen.
The stage that is passed as a parameter to <code>start()</code> is constructed by the system.
It represents the main window of a program, and is often referred to as the "primary stage."
A program can create other windows by constructing new objects of type <classname>Stage</classname>.</p>

<p>A window is an area on the screen that can be filled with content.  It can contain GUI components
such as menus, buttons, and text input boxes, as well as drawing areas like those used in the
graphical programs from <localref href="control.8"/>.
Although the primary stage is created before <code>start()</code> is called, the window does not have
any content, and it is not yet visible on the screen.  The <code>start()</code> method is
responsible for adding content to the window and making it visible.  The very last line
of <code>start()</code> in the <classname>HelloWorldFX</classname> program,
<code>stage.show()</code>, is what makes the window visible.  The rest of the method 
creates content, adds the content to the window, and sets various configuration options
for the content and for the window itself.  For example, the line</p>

<pre>stage.setTitle("JavaFX Test");</pre>

<np>sets the text that will appear in the title bar at the top of the window.</np>

<p>A stage shows a <newword>scene</newword>, which fills its content area and serves
as a container for the GUI components in the window.  A scene is represented by an
object of type <classname>Scene</classname>.  In the sample program, the statement</p>

<pre>stage.setScene(scene);</pre> 

<np>sets the scene that will be displayed in the content area of the stage.</np>

<p>A scene can be filled with things called GUI <newword>components</newword>,
such as buttons and menu bars.  Each component is represented by an object belonging to a JavaFX class.  
For example, a push button such as the "Say Hello" button in the sample program, is represented
by an object belonging to the class <classname>Button</classname>, from the package
<code>javafx.scene.control</code>.  Some components, such as the object <code>buttonBar</code> 
of type <classname>HBox</classname>, are <newword>containers</newword>.  A container represents
a region in the window that can contain other components, including other containers.  
So, a window contains GUI components, inside containers, which can be inside bigger
containers, each represented by an object.  All of these objects make up something called
the <newword>scene graph</newword> for the window.  The scene graph shows the
containment relationships among all the components in the scene.  For the sample program,
the scene graph looks like this:</p>

<img src="scene-graph.png" width="448" height="209" 
      tex="scene-graph.eps" texscale="0.7" alt="Diagram of the scene graph for HelloWorldFX program"/>
      
<np>Note that this is not a class hierarchy.  It does not show the relationships among
the classes of the objects in the program; rather, it is a containment hierarchy that shows
how the components are contained within other components on the screen.  In this scene graph,
<code>root</code> and <code>buttonBar</code> are containers while <code>message</code> and
the three buttons are simple components.</np>

<p>A scene contains a single "root" component, which  is
a container that contains all of the other components in the scene.  
In the sample
program, the root component is named <code>root</code> (although of course that is not required),
and the root of the scene is set when the <classname>Scene</classname> object is constructed:
</p>

<pre>Scene scene = new Scene(root, 450, 200);</pre>

<np>The numbers in this constructor specify the width and the height of the scene,
in pixels.  The numbers can be omitted, in which case the size will be computed based
on the contents of the scene.</np>

</subsection>
   
<subsection id="GUI1.1.3" title="Nodes and Layout">

<p>Objects that can be part of a scene graph are referred to as <code>nodes</code>.
Scene graph nodes must belong to one of the subclasses of <classname>javafx.scene.Node</classname>.
Scene graph objects that can act as containers must belong to one of the subclasses
of <code>javafx.scene.Parent</code>, which is a subclass of <classname>Node</classname>.
The nodes that are contained in a parent are called <newword>children</newword>
of that node.  The root node in a scene graph must be a <classname>Parent</classname>.</p>

<p>The buttons in <classname>HelloWorldFX</classname> are represented by objects of
type <classname>Button</classname>.  The constructor that is used
to create the button objects specifies the text that is displayed on the button.
Similarly, <code>message</code> is a node of type <classname>Label</classname>,
from package <code>javafx.scene.control</code>, whose purpose is simply to passively
display a <classname>String</classname>. 
One of the properties of a <classname>Label</classname> object is a font, which specifies
the size and style of the characters in the displayed string.  The font for the text is set by
calling the label's <code>setFont()</code> method.  The <classname>Font</classname> constructor that is used in the
sample program, <code>new&nbsp;Font(40)</code>, takes a parameter that specifies the size of the font.</p>

<p>Containers are <classname>Nodes</classname> which can have other nodes as children.
The act of arranging a container's children on the screen is referred to as <newword>layout</newword>.
Layout means setting the size and location of the components inside the container.  While it is possible
for a program to set the sizes and locations directly, it is more commonly done automatically
by the container.  Different containers implement different layout policies.  For example,
an <classname>HBox</classname> is a container that simply arranges the components that it contains
in a horizontal row.  In the constructor</p>

<pre>HBox buttonBar = new HBox( 20, helloButton, goodbyeButton, quitButton );</pre>

<np>the first parameter specifies the size of a gap that the <classname>HBox</classname> will place between 
its children, and the remaining parameters are nodes to be added as children of the container.</np>

<p>A <classname>BorderPane</classname> is a container that implements a completely different
layout policy.  A <classname>BorderPane</classname> can contain up to five components, one
in the center of the pane and up to four more placed at the top, at the bottom, to the left, and to the right
of the center.  In the sample program, the root of the scene is a <classname>BorderPane</classname>
and components are added in the pane's center and bottom positions with the statements</p>

<pre>root.setCenter(message);
root.setBottom(buttonBar);</pre>

<p>Layout is configurable by a large number of options.  The sample program has only 
one example of this,</p>

<pre>buttonBar.setAlignment(Pos.CENTER);</pre>

<np>This command centers the buttons within the <classname>HBox</classname>; without it,
they would be shoved over to the left edge of the window.  <classname>Pos</classname>,
short for "position," is an enumerated type (see <localref href="basics.3.4"/>).  JavaFX uses
many enumerated types for specifying various options.</np>

</subsection>

<subsection id="GUI1.1.4" title="Events and Event Handlers">

<p>In addition to setting up the physical layout of the window, the <code>start()</code>
method configures <newword>event handling</newword>.  In <classname>HelloWorldFX</classname>,
an event occurs when the user clicks one of the buttons.  The application must be configured
to respond to, or "handle," these events.  Handling an event involves two objects.
The event itself is represented by an object that holds information about the event.
For a button click, the event is of type <classname>ActionEvent</classname>,
and the information that it carries is the button that was clicked.  The second
object is of type <classname>EventHandler</classname>, a functional interface that defines
a method <code>handle(evt)</code>, where the parameter, <code>evt</code>, is the event object.
To program a response to an event, you can create a class that implements the <classname>EventHandler</classname>
interface and provides a definition for the <code>handle()</code> method.  However, since 
<classname>EventHandler</classname> is a functional interface, the handler can alternatively
be specified as a lambda expression (see <localref href="subroutines.4a"/>).  Lambda expressions
are very commonly used in JavaFX for writing event handlers, among other uses.
For example, the lambda expression</p>

<pre>evt -> message.setText("Hello World!")</pre>

<np>represents an event handler that responds to an event
by changing the text of the message to read "Hello World!".  The parameter, <code>evt</code>,
is the <classname>ActionEvent</classname> object that represents the event.
In this case, the parameter is not used in the response in any way, but it still has
to be there to satisfy the syntax of the lambda expression: Since the function in
the <classname>EventHandler</classname> interface has a parameter, the
lambda expression must have a parameter to match the interface.</np>

<p>In addition to writing the event handler, you also have to <newword>register</newword>
the handler with the object that will produce the event.  In this case, the object is
<code>helloButton</code>, and the handler is registered by calling the button's
<code>setOnAction()</code> method:</p>

<pre>helloButton.setOnAction( evt -> message.setText("Hello World!") );</pre>

<np>Handlers for each of the other two buttons are set up in a similar way.  Remember that
in each case, there is an object that generates the event in response to a user action,
an object that represents the event, and an event handler that contains the code that
is executed in response to the event.  This diagram summarizes how it all works:</np>
   
<img src="event-handling.png" width="561" height="172" tex="event-handling.eps" texscale="0.6" 
      bordered="true" alt="How ActionEvents on a button are handled"/>

<np>About all that still remains to be explained in the sample program is the response to a click on the
"Quit" button: <code>Platform.exit()</code>.  The static <code>exit()</code> method in
the <classname>Platform</classname> class is the preferred way to programmatically
end a JavaFX program.  It is preferred to <code>System.exit()</code> because it
cleanly shuts down the application thread and gives it an opportunity to clean
up by calling the application's <code>stop()</code> method before terminating.</np>

<break/>

<p>This section has been only a brief overview of JavaFX applications, but it has
introduced many of the fundamental concepts.  We will cover all of this in much
greater detail in the following sections.</p>

</subsection>


</section>