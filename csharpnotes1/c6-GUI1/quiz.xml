<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE quiz SYSTEM "../csharpnotes1.dtd" >

<quiz>

<question>
<ques><p>Programs written for a
graphical user interface have to deal with "events." Explain what is meant by
the term <i>event.</i> Give at least two different examples of events, and
discuss how a program might respond to those events.</p></ques>
<ans><p> An event is anything that can
occur asynchronously, not under the control of the program, to which the
program might want to respond. GUI programs are said to be "event-driven"
because for the most part, such programs simply wait for events and respond to
them when they occur. In many (but not all) cases, an event is the result of a
user action, such as when the user clicks the mouse button, types a character,
or clicks a button. The program might respond to a mouse-click on a canvas by
drawing a shape, to a typed character by adding the character to an input box,
or to a click on a button by clearing a drawing. More generally, a programmer
can set up any desired response to an event by writing an event-handling
routine for that event.</p></ans>
</question>

<question>
<ques><p>A central concept in JavaFX is the <i>scene graph</i>?  What is a scene graph?
</p></ques>
<ans><p>A scene graph is a hierarchical data structure that represents the contents
of a window.  The scene graph is made up of "nodes" that represent visible components
in the window, such as buttons and text-input boxes.  Some of the nodes are "containers,"
which can contain other nodes.  The GUI in a window is created by building a scene
graph for window and setting the "root," or top, node of the scene graph to be
the root of the window's scene.</p>
</ans>
</question>   
   
<question>
<ques><p>JavaFX has standard classes called <classname>Canvas</classname>
and <classname>GraphicsContext</classname>.  Explain the purpose of
these classes.</p></ques>
<ans><p>A <classname>Canvas</classname> is a scene graph node that represents a
drawing surface where a program can draw pictures.  A canvas has an associated
<classname>GraphicsContext</classname> that is used to do the drawing.  The
graphics context has instance methods for drawing shapes, such as lines
and rectangles, on the associated canvas. It can also draw text and images.
The graphics context also has properties that affect the appearance of
the things it draws, such as the font that is used for text and 
the colors that are used for stroking and filling shapes.</p></ans>
</question>

<question>
<ques><p>Suppose that <code>canvas</code> is a variable of type <classname>Canvas</classname>.
Write a code segment that will draw a green square centered inside a red circle on the canvas, as illustrated.</p>
<img src="square-in-circle.png" width="100" height="100" alt="(Picture of Circle in Square)"
   tex="square-in-circle.eps" texscale="0.8"/></ques>
<ans><p>Note: The size of the square and
circle are not specified in the problem, so any size would be acceptable, as
long as the square is in the exact middle of the circle.  My solution draws
the shapes in a 100-by-100 pixel canvas, leaving a 10-pixel space around
the edges.  It does not draw the white background, only the shapes.</p>
<p>To draw on the canvas, you need to use the canvas's <classname>GraphicsContext</classname>.
Since it's not given in the problem, you have to get the graphics context by calling
<code>canvas.getGraphicsContext2D()</code>.  If <code>g</code> is the graphics context,
then the methods for drawing the interior of circle and square are <code>g.fillOval(x,y,w,h)</code> 
and <code>g.fillRect(x,y,w,h)</code>.  (There are no special methods for drawing circles and squares;
you have to draw ovals and rectangles, using the same value for the width and for the
height.)  The graphics context's <code>setFill()</code> has to be called before filling
each shape, to set the color for the shape.</p>
<pre>GraphicsContext g = canvas.getGraphicsContext2D();
g.setFill(Color.RED);      // draw the shapes
g.fillOval(10,10,80,80);
g.setFill(Color.GREEN);
g.fillRect(30,30,40,40);
</pre></ans>
</question>
   
<question>
<ques><p>Draw the picture that will
be produced by the following <code>for</code> loop, where
<code>g</code> is a variable of type <classname>GraphicsContext</classname>:</p>
<pre>for (int i=10; i &lt;= 210; i = i + 50) {
   for (int j = 10; j &lt;= 210; j = j + 50) {
      g.strokeLine(i,10,j,60);
   }
}</pre></ques>
<ans><p>The outer loop is executed for
values of <code>i</code> equal to 10, 60, 110, 160, and 210. For <b>each</b> of
these values, the inner loop is executed for <code>j</code> equal to 10, 60, 110,
160, and 210. The <code>strokeLine</code> command is therefore executed 25 times&mdash;and
so, 25 different lines are drawn. These lines connect the five points
(10,10), (60,10), (110,10), (160,10), and (210,10) to the five points (10,60),
(60,60), (110,60), (160,60), and (210,60) in all possible pairings. Here is the
picture:</p>
<img width="220" height="70" src="crisscross.png" alt="(25 criss-crossed lines)"/></ans>
</question>
   
   
<question>
<ques><p>JavaFX has a standard class
called <classname>MouseEvent</classname>. What is the purpose of this class? What does an
object of type <classname>MouseEvent</classname> do?</p></ques>
<ans><p>When an event occurs, the system
packages information about the event into an object. That object is passed as a
parameter to the event-handling routine. Different types of events are
represented by different classes of objects. An object of type
<classname>MouseEvent</classname> represents an event that was generated because
the user moved the mouse or manipulated its buttons. It contains
information about the location of the mouse cursor and any modifier keys that
the user is holding down. This information can be obtained by calling the
instance methods of the object. For example, if <code>evt</code> is a
<classname>MouseEvent</classname> object, then <code>evt.getX()</code> is the
<code>x</code>-coordinate of the mouse cursor, and <code>evt.isShiftDown()</code> is a
boolean value that tells you whether the user was holding down the Shift
key.</p></ans>
</question>

<question>
<ques><p>Explain the difference between a <code>KeyPressed</code> event
and a <code>KeyTyped</code> event.</p>
</ques>
<ans><p><code>KeyPressed</code> and <code>KeyTyped</code> events
are generated when the user uses the keyboard, and both kinds of
event are represented by event objects of type <classname>KeyEvent</classname>.
But a <code>KeyPressed</code> event occurs each time the user presses a
key, and a <code>KeyTyped</code> event occurs each time the user's
typing generates a character.  It might take several key presses
(and maybe key releases) to type a single character.</p>
<p>In more detail: A <code>KeyPressed</code> event is generated every time the user
depresses one of the keys on a keyboard, even if doing so does not
type a character.  For example, pressing the shift key generates a
<code>KeyPressed</code> event, even though the shift key, by itself,
does not type anything.  The corresponding <classname>KeyEvent</classname>
object contains a code (such as <code>KeyCode.SHIFT</code> for the shift key)
that tells which key was pressed.  As the user types, a <code>KeyTyped</code>
event is generated each time the user's typing generates a character.
The <code>KeyTyped</code> event is in addition to any <code>KeyPressed</code>
and <code>KeyReleased</code> events that were generated.  The <classname>KeyEvent</classname>
object for a <code>KeyTyped</code> event has a property of type <classname>String</classname>
that contains the character that was typed.</p>
</ans>
</question>
   
<question>
<ques><p>Explain how <classname>AnimationTimers</classname>
are used to do animation.</p></ques>
<ans><p>Displaying an animation requires
showing a sequence of frames. The frames are shown one after the other, with a
short delay between each frame and the next. An <classname>AnimationTimer</classname> 
has an instance method, <code>handle()</code>, that is called repeatedly
while the animation is running.  That method
can update any state variables that need to change between frames, and it can draw a
picture for the current frame.  To use an <classname>AnimationTimer</classname>
you need to create a subclass of <classname>AnimationTimer</classname> 
and provide a definition for the <code>handle()</code>
method.  You need to create a variable, say <code>timer</code>, from that subclass, and call
<code>timer.start()</code> to start the animation running.  (You can call <code>timer.stop()</code>
to stop the animation.) </p></ans>
</question>
   
<question>
<ques><p>What is a <classname>CheckBox</classname> and how is it used?  How does
it differ from a <classname>RadioButton</classname>?</p></ques>
<ans><p>A <classname>CheckBox</classname> is a
component that has two possible states, "selected" and "not selected". The user can
change the state by clicking on the <classname>CheckBox</classname>. If <code>box</code> is a
variable of type <classname>CheckBox</classname>, then a program can set the state of the box 
to "selected" by calling <code>box.setSelected(true)</code> and can deselect the box by calling
<code>box.setSelected(false)</code>. The current state can be determined by calling
<code>box.isSelected()</code>, which is a boolean-valued function. A
<classname>CheckBox</classname> generates an event of type <code>ActionEvent</code> when the 
user changes its state. A program can listen for these events if it wants to take some
action at the time the state changes. Often, however, it's enough for a program
simply to look at the state of the <classname>CheckBox</classname> when it needs it.</p>
<p>A <classname>RadioButton</classname> is very similar and can be used in the same
way.  The difference is that a <classname>RadioButton</classname> can be added to
a <classname>ToggleGroup</classname>.  The toggle group will ensure that only one
radio button in the group can be selected at a given time.  When the user
selects a radio button in the group, the previously selected button is
automatically deselected.</p></ans>
</question>
   
<question>
<ques><p>What is meant by <i>layout</i> of GUI components?  Explain briefly how
layout is done in JavaFX.</p></ques>
<ans><p>Layout means setting the sizes and the locations of the visible components
in a window.  In JavaFX, most components are in "containers", such as
<classname>VBox</classname> or <classname>BorderPane</classname>, and it 
is the responsibility of the container to lay out the components that it contains.
The programmer simply adds the components to the container (when building the scene graph).
Different types of container implement different policies for laying other their
content. Some containers leave some or all of the layout decisions to the
programmer, and it is also possible for the program to take over the layout
of a component completely by making that component "unmanaged."</p></ans>
</question>

<question>
<ques><p>How does a <classname>BorderPane</classname> arrange the components that it
contains?</p>
</ques>
<ans><p>A <classname>BorderPane</classname> can contain up to five components.
One component occupies the center of the pane while the other components, if
present, are placed above, below, to the left and to the right of the center.
(The position of a component, <code>c</code>, is specified when it is added
to the pane, using one of the commands
<code>pane.setCenter(c)</code>, <code>pane.setTop(c)</code>, <code>pane.setBottopm(c)</code>, 
<code>pane.setLeft(c)</code>, or <code>pane.setRight(c)</code>.)</p>
<p>The top and bottom components will be given their preferred heights; their widths will be
set to fill the entire width of the pane (if that width is not greater than the
component's maximum width).  The left and right components will be shown at their
preferred widths, and their height will be set to fill the height of the
pane, minus the space occupied by the top and bottom components.  The
remaining space in the pane is used for the center component.</p>
</ans>
</question>

<question>
<ques><p>How is the <i>preferred size</i> of a component set, and how is it used?</p></ques>
<ans><p>Standard components such as <classname>Button</classname> and <classname>Label</classname>
are responsible for computing their own preferred size.  A label, for example, has
a preferred size that is just large enough to show the text and/or graphic on the label.
The preferred size of a container is also usually computed by the container, based on the
preferred sizes of the components that it contains.  But is also possible for a program to set the
preferred sizes of most components by calling the methods <code>comp.setPrefWidth(w)</code>
and <code>comp.setPrefHeight(h)</code>, and those values will be used instead of a computed size.
(There is also a method <code>comp.setPrefSize(w,h).)</code></p>
<p>A container uses the preferred sizes of all the components in the container when it decides how to
lay out those components.  It also uses the components' preferred sizes if it needs to 
compute its own preferred size.</p>
<p>(Note that the preferred size is only preferred; it is not
necessarily the size at which the component will appear on the screen.  The actual size can depend
on how container it is in does layout, the position of the component in the layout, the size of the
container, and the preferred sizes of other components in the container.)</p></ans>
</question>
   
</quiz>