<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section SYSTEM "../csharpnotes1.dtd" >

<section id="GUI1.5" title="Basic Layout">
   
<p><start><big>C</big>omponents</start> are the fundamental building blocks
of a graphical user interface.  But you have to do more with components besides create them.
Another aspect of GUI programming is <newword>laying out</newword> components on the screen,
that is, deciding where they are placed and how big they are. You have probably
noticed that computing coordinates can be a difficult problem, especially if
you don't assume a fixed size for the drawing area. Java has a solution for this, as
well.</p>

<p>Components are the visible objects that make up a GUI. Some components are
<newword>containers</newword>, which can hold other components.  In <code>JavaFX</code> terms,
a container is a scene graph node that can contain other scene graph nodes
as "children."  The children of a container must be "laid out," which means setting their
sizes and positions.  It is possible for you to program the layout yourself, but
layout is usually done automatically by the container.  Different kinds of containers
implement different policies for laying out their child nodes.  
In this section, we will cover some common types of JavaFX containers and
their layout policies.  In this section and
<localref href="GUI1.6">the next</localref>, we will look at several programming examples that use 
components and layout.</p>

<p>Because a container is itself a scene graph node, you can add a container as a child of
another container. This makes complex
nesting of components possible, as shown in this illustration:</p>

<img src="panels-in-layout.png" width="217" height="164" alt="illustration of panels nested in other panels"
   tex="panels-in-layout.eps"/>
  
<np>In this picture, a large container holds two smaller containers.  Each of the two smaller
containers in turn holds three components.</np>

<break/>

<p>Every scene graph node has a minimum width and height, a maximum width and height, and a preferred width and height.
A container consults these values when it is deciding how to lay out its children.  (Some nodes, however, 
are not resizable, meaning not meant to be resized by a container during layout; for such components,
the minimum, maximum, and preferred width and height are effectively equal to the component's actual size.
<classname>Canvas</classname> and <classname>ImageView</classname> are examples of non-resizable components.)
In general, a container will compute its own preferred size
based on the components that it contains.  The container's preferred size will allow each
component that it contains to have at least its preferred size.  The container will compute its own minimum
and maximum sizes in a similar way, based on the minimum and maximum sizes of its children.</p>

<p>When setting the size of a child while doing layout, most containers will <b>not</b> set the
width of the child to be less than the child's minimum width or greater than the child's maximum width, and the same
for the child's height.  This will be true even if it means that the child will overlap other
components or will extend outside the container.  (The part outside the container 
might or might not be shown, depending on the container.)
This can also leave empty space in the container.</p>
   
<p>Resizable nodes, which includes controls and most containers, have instance methods 
for setting the minimum, preferred, and maximim width:
<code>setMinWidth(w)</code>, <code>setPrefWidth(w)</code>, and <code>setMaxWidth(w)</code>,
where the parameter is of type <ptype>double</ptype>, with similar instance methods for
the height.  You can also set width and height values simultaneously with methods such as
<code>setMaxSize(w,h)</code> and <code>setPrefSize(w,h)</code>.
For a container, the values set by these methods will override the values
that would have been computed by the container based the children
that it contains.</p>


<p>In JavaFX, containers that do layout are defined by the class <classname>Pane</classname>
and its subclasses.  (<classname>Pane</classname> and its subclasses are in package
<code>javafx.scene.layout</code>.)  Here, we look at a few of these layout classes,
starting with using <classname>Pane</classname> directly.</p>

   
<subsection id="GUI1.5.1" title="Do Your Own Layout">


<p>Sometimes, you would like to do your own layout, instead of letting it
up to one of the standard container classes.  You can get complete control
of the size and location of a node by setting it to be "unmanaged":</p>

<pre>node.setManaged(false);</pre>

<np>When you do that, <b>any</b> container that contains <code>node</code> as a child
will completely ignore <code>node</code>, as far as layout is concerned.  It is
your responsibility to set its location and (for resizable nodes) size.  Note that
an unmanaged node must still be placed inside a container for it to appear on
the screen.</np>

<p>For our first layout example, we'll look at using the <classname>Pane</classname>
class itself for the container.  The <classname>Pane</classname> will manage
the size, but not the location, of the managed nodes that it contains.
That is, by using a <classname>Pane</classname> as container,
you assume responsibility for setting the positions of the child nodes.
The <classname>Pane</classname> will, by default, resize each child to its 
preferred size; if you want to take over that job too,
you need to make the child unmanaged.</p>

<p>If <code>node</code> is any scene graph node that is unmanaged or is
in a container that does not set the location  of its child nodes, then
you can set the location by calling</p>

<pre>node.relocate( x, y );</pre>

<np>This puts the top left corner of the node at the point <code>(x,y)</code>,
measured in the coordinate system of the container that contains the
node.  Similarly, you can set the size of <code>node</code>, when that
is allowed, by calling</np>

<pre>node.resize( width, height )</pre>

<np>The width and height are measured in pixels.</np>
   
<break/>
   
<p>We will look at an example that contains four components: two buttons, a label, and a
canvas that displays a checkerboard pattern:</p>

<img src="null-layout-demo.png" width="400" height="358" alt="OwnLayoutDemo with checkerboard, two buttons, and a message"
     tex="null-layout-demo.eps" texscale="0.6"/>

<np>The program is just an example of layout; it doesn't do anything,
except that clicking the buttons changes the text of the label. (I will use
this example in <localref href="arrays.5"/> as a starting point for a checkers game.)</np>

<p>This example uses a <classname>Pane</classname> as the root node of the scene
and as the container for the four components.  This means that the program is responsible
for setting the locations of the components, by calling their <code>relocate()</code>
method.  (Without that, they will all appear with their top left corners at the default
location, (0,0)!)  After looking at the result, I decided that I wanted the two buttons
to have the same size and to be larger than their preferred sizes.  For that to work,
the buttons had to be made unmanaged.  (Otherwise, calling their <code>resize()</code> method
would have no effect because the pane would set them back to their preferred size.)
Here is the code from the application's <code>start()</code> method that creates the four components and configures
them, including setting their locations and sizes:</p>

<pre>/* Create the child nodes. */

board = new Checkerboard(); // a nested subclass of Canvas
board.draw();  // draws the content of the checkerboard

newGameButton = new Button("New Game");
newGameButton.setOnAction( e -> doNewGame() );

resignButton = new Button("Resign");
resignButton.setOnAction( e -> doResign() );

message = new Label("Click \"New Game\" to begin.");
message.setTextFill( Color.rgb(100,255,100) ); // Light green.
message.setFont( Font.font(null, FontWeight.BOLD, 18) );

/* Set the location of each child by calling its relocate() method */

board.relocate(20,20);
newGameButton.relocate(370, 120);
resignButton.relocate(370, 200);
message.relocate(20, 370);

/* Set the sizes of the buttons.  For this to have an effect, make
 * the butons "unmanaged."  If they are managed, the Pane will set
 * their sizes. */

resignButton.setManaged(false);
resignButton.resize(100,30);
newGameButton.setManaged(false);
newGameButton.resize(100,30);</pre>

<p>The <classname>Pane</classname> that holds the components is
the root node of the scene.  The window for the program will be 
sized to be just large enough to hold the <classname>Pane</classname>
at its preferred size.  By default, a <classname>Pane</classname>
computes its preferred size to be just large enough to show all
of its managed children.  Since I made the buttons unmanaged,
they would not be included in the preferred size.  To make the
window large enough to include them (and to allow more empty
space below the label), the program sets the preferred width
and height of the pane:</p>

<pre>Pane root = new Pane();
root.setPrefWidth(500);
root.setPrefHeight(420);</pre>

<np>The buttons, label, and board must still be added as children of the
pane, to make them appear on the screen.  This is done with the command:</np>

<pre>root.getChildren().addAll(board, newGameButton, resignButton, message);</pre>

<np>Alternatively, they could have been added one by one using statements
such as</np>

<pre>root.getChildren().add(board);</pre>

<np>or the child nodes could have been given as parameters to the 
constructor:</np>

<pre>Pane root = new Pane(board, newGameButton, resignButton, message);</pre>

<np>The pane still has to be made the root of the scene, the scene has to
be placed in the stage, and the stage has to be configured and shown
on the screen.  See the source code, <sourceref href="OwnLayoutDemo.java"/>,
for the complete story.</np>

<p>It's fairly easy in this case to get a reasonable layout. It's much
more difficult to do your own layout if you want to allow for changes in the size
of the window.  To do that, you would probably write your own subclass of
<classname>Pane</classname> (or of its superclass, <classname>Region</classname>),
and override the <code>layoutChildren()</code> method, which is called by the
system when a container needs to do layout, including when the container is resized. 
However, my real advice is
that if you want to allow for changes in the container's size, try to find a
standard container that will do the layout work for you.</p>

</subsection>



<subsection id="GUI1.5.2" title="BorderPane">

   
<p>A <classname>BorderPane</classname> is a subclass of <classname>Pane</classname> 
that is designed to display
one large, central component, with up to four smaller components arranged around
the edges of the central component.  The five positions are referred to
as center, top, right, bottom, and left.  The meaning of the five
positions is shown in this diagram:</p>

<img src="border-layout.png" width="229" height="181" alt="positions of components in a BorderPane"
   tex="border-layout.eps" texscale="0.6"/>   
   
<np>Note that a border layout can contain fewer than five components,
so that not all five of the possible positions need to be filled.
It would be very unusual, however, to have no center component.</np>

<p>The <classname>BorderPane</classname> class has two constructors, one with no
parameters and one that takes a single parameter giving the center child of the pane. 
Child nodes can be added to a <classname>BorderPane</classname>, <code>pane</code>,
using the methods</p>

<pre>pane.setCenter(node);
pane.setTop(node);
pane.setRight(node);
pane.setBottom(node);
pane.setLeft(node);</pre>

<np>Calling one of these methods with parameter <code>null</code> will remove the
child from that position in the pane.</np>
   
<p>A <classname>BorderPane</classname> sets the sizes of its child nodes
as follows, except that the width and height of a component
is always restricted to lie between the minimum and maximum width 
and height of that component:  The top and bottom components (if
present) are shown at their preferred heights, but their width is set equal
to the full width of the container.
The left and right components are shown at their preferred widths, 
but their height is set to the height of the container, minus the space 
occupied by the top and bottom components.  Finally, the center component
takes up any remaining space.</p>
 
<p>The default preferred size of <classname>BorderPane</classname> is set just
big enough to accommodate the preferred sizes of its (managed) children.
The minimum size is computed in a similar way.  The default maximum size of a 
<classname>BorderPane</classname> is unlimited.</p>

<break/>

<p>For some subclasses of
<classname>Pane</classname>, it is possible to tweak the layout of the
children by applying things called <newword>layout constraints</newword>.
For example, what happens in a <classname>BorderPane</classname> if 
a child cannot be resized to exactly fit the available space?
In that case, the child has a default position within the available
space.  The center child is centered within the center space of the
pane, the bottom child is placed at the bottom left corner of the
bottom space in the pane, and so on.  You can change this default
placement using a static method from the <classname>BorderPane</classname>
class:</p>

<pre>BorderPane.setAlignment( child, position );</pre>

<np>where <code>child</code> is the child node whose position you want
to tweak and <code>position</code> is one of the constants from 
the enumerated type <classname>Pos</classname>, from package
<code>javafx.geometry</code>.  Possible positions include
<code>Pos.CENTER</code>, <code>POS.TOP_LEFT</code>,
<code>Pos.BOTTOM_RIGHT</code>, and so on.  (I find it strange
that the alignment is set using a static method, but that's the
way layout constraints work in JavaFX.)</np>

<p>You can also set a <newword>margin</newword> for any
child of a <classname>BorderPane</classname>.  A margin is
empty space around the child. The background color of the
pane will show in the margin.  A margin is specified as
a value of type <classname>Insets</classname>, from
package <code>javafx.geometry</code>.  An object
of type <classname>Insets</classname> has
four <ptype>double</ptype> properties,
<code>top</code>, <code>right</code>, <code>bottom</code>,
and <code>left</code>, which can be specified in the
constructor:</p>

<pre>new Insets(top,right,bottom,left)</pre>

<np>There is also a constructor that takes a single parameter,
which is used as the value for all four properties.
When used as a margin for a child node, the properties
specify the width of the margin along the top, right,
bottom, and left edges of the child.  The margin can
be specified using another static method:</np>

<pre>BorderPane.setMargin( child, insets );</pre>

<np>For example,</np>

<pre>BorderPane.setMargin( topchild, new Insets(2,5,2,5) );</pre>

<p>Remember that you can also tweak the appearance of a container
using CSS (<localref href="GUI1.2.5"/>), which is the easiest way to set
a border or background color for the container.</p>

</subsection>

<subsection title="HBox and VBox" id="GUI1.5.3">

<p>It is common to want to lay out a set of components
in a horizontal row or in a vertical column.  For that, the
classes <classname>HBox</classname> and <classname>VBox</classname>
can be used.  <classname>HBox</classname> is a subclass of
<classname>Pane</classname> that lays out its children next
to each other, in a horizontal row.  <classname>VBox</classname>
is a subclass of <classname>Pane</classname> that lays out
its children in vertical column.  An <classname>HBox</classname>
might be used as the bottom component in a <classname>BorderPane</classname>,
making it possible to line up several components along the bottom
of the border pane.  Similarly, a <classname>VBox</classname>
might be used as the left or right component of a <classname>BorderPane</classname>.
Here, I will only discuss <classname>HBox</classname>, but <classname>VBox</classname>
is used in an entirely analogous way.</p>

<p>An <classname>HBox</classname>, <code>hbox</code>, can be configured to leave a gap between
each child and the next.  The amount of the gap is given by a value of type double,
which can be set by calling</p>

<pre>hbox.setSpacing( gapAmount );</pre>

<np>The default value is zero.  Children can be added to <code>hbox</code> in the same
way as for <classname>Pane</classname>, that is, by calling
<code>hbox.getChildren().add(child)</code> or
<code>hbox.getChildren().addAll(child1,child2,&dots;)</code>.
The <classname>HBox</classname> class has a constructor with no parameters, as well
as one that takes the size of the gap as its first parameter, optionally
followed by child nodes to be added to the box.</np>

<p>By default, an <classname>HBox</classname> will resize its children to their
preferred widths, possibly leaving some blank extra space on the right.  (The blank
space would be there because the width of the <classname>HBox</classname> has been
set to be larger than its preferred width.)
If using the children's preferred widths would make the total width greater than the actual width
of the <classname>HBox</classname>, it will shrink the children, within the 
limit of their minimum widths. The height of the children will be set to the
full available height in the <classname>HBox</classname>, but, as always, within
the limits set by their minimum and maximum heights.</p>

<p>Perhaps you would like the children to grow beyond their preferred widths,
to fill the available space in an <classname>HBox</classname>.  To make
that happen, you need to set a layout constraint on each child that you
want to grow, using a static method:</p>

<pre>HBox.setHgrow( child, priority );</pre>

<np>The second parameter is a constant of the enumerated type <classname>Priority</classname>, from
package <code>javafx.scene.layout</code>.  The value will likely
be <code>Priority.ALWAYS</code>, which means that the child will always get a share of the
extra space.  The child's width will still be limited by its maximum width, so you might
need to increase that maximum to get the child to grow to the extent that you want.</np>

<p>As an example, suppose that an <classname>HBox</classname> contains three <classname>Buttons</classname>,
<code>but1</code>, <code>but2</code>, and <code>but3</code>, and that you would like them to grow
to fill the entire <classname>HBox</classname>.  You need to set the <code>HGrow</code>
constraint on each button.  Furthermore, since the maximum width of a button is
equal to its preferred width, you need to increase each button's maximum width.
Here, I set the maximum width to be <code>Double.POSITIVE_INFINITY</code>, which means
that the button can grow without any limit:</p>

<pre>HBox.setHgrow(but1, Priority.ALWAYS); 
HBox.setHgrow(but2, Priority.ALWAYS); 
HBox.setHgrow(but3, Priority.ALWAYS); 
but1.setMaxWidth(Double.POSITIVE_INFINITY); 
but2.setMaxWidth(Double.POSITIVE_INFINITY); 
but3.setMaxWidth(Double.POSITIVE_INFINITY);</pre>

<np>Any extra space will be distributed equally to the three buttons and added on to
their preferred widths.  This does not mean that they will all have the same width, because 
their original, preferred widths might not be equal.  For a <sourceref href="HighLowGUI.java">sample program</sourceref> in the
<localref href="GUI1.6.1">next section</localref>, I wanted the three buttons in
an <classname>HBox</classname> to be the same size.  To accomplish that, I simply gave
all three buttons the same large preferred width:</np>

<pre>but1.setPrefWidth(1000);
but2.setPrefWidth(1000);
but3.setPrefWidth(1000);</pre>

<np>The <classname>HBox</classname> will then shrink the buttons proportionately to
fit in the available space, and they all end up with the same width.</np>

<p>There are other ways to tweak the layout in an <classname>HBox</classname>.
You can add a margin around any child using a static method similar to the
one that is used for the same purpose in a <classname>BorderPane</classname>.
You can set the <classname>HBox</classname> to use the preferred heights
of its children, instead of stretching them to fit the height of the
hbox by calling <code>hbox.setFillHeight(false)</code>.  You can say
where in the hbox the children are placed, when they do not fill the
entire hbox by calling <code>hbox.setAlignment(position)</code>;
the parameter is of type <classname>Pos</classname> with a
default of <code>Pos.TOP_LEFT</code>.  And, of course, you can apply
CSS style properties.</p>

<break/>

<p>As an example, we look at a GUI built entirely using <classname>HBox</classname>
and <classname>VBox</classname>.  The complete program can be found
in <sourceref href="SimpleCalc.java"/>.  The program has two <classname>TextFields</classname>
where the user can enter numbers, four <classname>Buttons</classname> that the
user can click to add, subtract, multiply, or divide the two numbers, and
a <classname>Label</classname> that displays the result of the operation.  Here
is a picture of the program's window:</p>

<img src="simple-calc.png" width="212" height="171" alt="screenshot from SimpleCalc.java"
       tex="simple-calc.eps" texscale="0.6"/>
 
<np>The root node for the window is a <classname>VBox</classname> containing 
four items, where the first three items are <classname>HBoxes</classname>.
The first <classname>HBox</classname> contains two components,
a <classname>Label</classname> displaying the text "<code>x&nbsp;=</code>"
and a <classname>TextField</classname>.  It is created with the commands</np>

<pre>xInput = new TextField("0");  // Text input box initially containing "0"
HBox xPane = new HBox( new Label(" x = "), xInput );</pre>

<np>and it is later added as the first child of the <classname>VBox</classname>
Note that the label is simply created with a constructor and added to
the <classname>HBox</classname>, since there is no need to keep a reference to
it.</np>

<p>The third <classname>HBox</classname> contains the four buttons.
The buttons' default widths would be rather small.  To make them
fill the entire <classname>HBox</classname>, I add an hgrow constraint
to each button and increase its maximum width.  Here is how it's done:</p>

<pre>/* Create the four buttons and an HBox to hold them. */

Button plus = new Button("+");
plus.setOnAction( e -> doOperation('+') );

Button minus = new Button("-");
minus.setOnAction( e -> doOperation('-') );

Button times = new Button("*");
times.setOnAction( e -> doOperation('*') );

Button divide = new Button("/");
divide.setOnAction( e -> doOperation('/') );

HBox buttonPane = new HBox( plus, minus, times, divide );

/* The four buttons need to be tweaked so that they will fill
 * the entire buttonPane.  This can be done by giving each button
 * a large maximum width and setting an hgrow constraint
 * for the button. */

HBox.setHgrow(plus, Priority.ALWAYS);
plus.setMaxWidth(Double.POSITIVE_INFINITY);
HBox.setHgrow(minus, Priority.ALWAYS);
minus.setMaxWidth(Double.POSITIVE_INFINITY);
HBox.setHgrow(times, Priority.ALWAYS);
times.setMaxWidth(Double.POSITIVE_INFINITY);
HBox.setHgrow(divide, Priority.ALWAYS);
divide.setMaxWidth(Double.POSITIVE_INFINITY);</pre>

<p>The last position in the <classname>VBox</classname> is occupied by a
<classname>Label</classname>.  Since there is only one component, it is
added directly to the <classname>VBox</classname>; there is no need to
wrap it in an <classname>HBox</classname>.  However, in order to
get the text in the label to appear in the center instead of at the
left edge of the window, I needed to increase the maximum width of the
label (so that the <classname>VBox</classname> will set its width
to fill the entire available space).  Furthermore, I had to set
the alignment property of the label, to tell the label to place its
text in the center of the label and not at the left:</p>

<pre>answer.setMaxWidth(Double.POSITIVE_INFINITY);
answer.setAlignment(Pos.CENTER);</pre>
   
<p>One point of interest in this example, aside from the layout, is the <code>doOperation()</code>
method that is called when the user clicks one of the buttons.  This method must
retrieve the user's numbers from the text fields, perform the appropriate 
arithmetic operation on them (depending on which button was clicked), and
set the text of the <classname>Label</classname>
to represent the result.  However, the contents of
the text fields can only be retrieved as strings, and these strings must be
converted into numbers.  If the conversion fails, the label is set to display 
an error message:</p>
   
<pre>private void doOperation( char op ) {

    double x, y;  // The numbers from the input boxes.

    try {  // Get x from the first input box.
        String xStr = xInput.getText();
        x = Double.parseDouble(xStr);
    }
    catch (NumberFormatException e) {
            // The string xStr was not a legal number.
            // Show an error message, move the input focus 
            // to xInput and select all the text in that box.
        answer.setText("Illegal data for x.");
        xInput.requestFocus();
        xInput.selectAll();
        return; // stop processing when an error occurs!
    }

    try {  // Get a number from the second input box.
        String yStr = yInput.getText();
        y = Double.parseDouble(yStr);
    }
    catch (NumberFormatException e) {
        answer.setText("Illegal data for y.");
        yInput.requestFocus();
        yInput.selectAll();
        return;
    }

    /* Perform the operation based on the parameter, op. */

    if (op == '+')
        answer.setText( "x + y = " + (x+y) );
    else if (op == '-')
        answer.setText( "x - y = " + (x-y) );
    else if (op == '*')
        answer.setText( "x * y = " + (x*y) );
    else if (op == '/') {
        if (y == 0) {  // Can't divide by zero! Show an error message.
            answer.setText("Can't divide by zero!");
            yInput.requestFocus();
            yInput.selectAll();
        }
        else {
            answer.setText( "x / y = " + (x/y) );
        }
    }

} // end doOperation()</pre>
   
<np>The complete source code for this example can be found in <sourceref href="SimpleCalc.java"/>.</np>

</subsection>

<subsection title="GridPane and TilePane" id="GUI1.5.4">

<p>Next, we consider <classname>GridPane</classname>, a subclass of
<classname>Pane</classname> that lays out its children in rows and columns.
Rows and columns are numbered, starting from zero.  Here is an illustration
of a typical grid with 4 rows and 5 columns:</p>

<img src="grid-layout.png" width="416" height="311" alt="cells in a GridPane"
   tex="grid-layout.eps" texscale="0.6"/>   

<np>Note that the rows are not necessarily all the same height, and
columns are not necessarily all the same width.</np>

<p>It is possible to leave gaps between rows or between columns, where
the background of the <classname>GridPane</classname> will show.
If <code>grid</code> is the <classname>GridPane</classname>, set the
size of the gaps by calling</p>

<pre>grid.setHGap( gapSize );  // gap between columns
gris.setVGap( gapSize );  // gap between rows</pre>

<p>You can specify the row and column where a child is to be placed
when you add the child to the <classname>GridPane</classname>:</p>

<pre>grid.add( child, column, row );</pre>

<np>(Note that the column number is specified first.)  In fact, it is
possible for a child to span several rows or several columns in the
grid.  The number of columns and number of rows that the
child should occupy can be given as additional parameters to the
<code>add()</code> method:</np>

<pre>grid.add( child, column, row, columnCount, rowCount );</pre>

<np>The number of rows and number of columns in the grid are determined
by the positions of the children that have been added to it.</np>

<p>A <classname>GridPane</classname> will resize each child to fill the
position or positions that it occupies in the grid (within minimum and
maximum size limits).  The preferred width of a column will be just large
enough to accommodate the preferred widths of all the children in that
column, and similarly for the preferred height.  There are several ways
to tweak this behavior, but here I will only mention that the
actual column width and row height can be controlled.</p>

<p>A <classname>GridPane</classname> can have a set of <newword>column
constraints</newword> and a set of <newword>row constraints</newword>
that determine how the column width and row height are computed.
The width of a column can be computed based on the widths of its
children (the default), it can be set to a constant value, or it can be computed
as a percentage of available space.  Computation of row height is similar.
Here is how to set constant row heights 
for a <code>gridpane</code> that has four rows:</p>

<pre>gridpane.getRowConstraints().addAll(
     new RowConstraints(100), // row 0 has height 100 pixels 
     new RowConstraints(150), // row 1 has height 150 pixels 
     new RowConstraints(100), // row 2 has height 100 pixels 
     new RowConstraints(200), // row 3 has height 200 pixels 
);</pre>

<np>In this case, the total height of the gridpane is the same,
no matter how much space is available for it.</np>

<p>When percentages are used, the grid pane will expand to
fill available space, and the row height or column width will be computed
from the percentages.  For example, to force a five-column gridpane to fill
the available width and to force all columns to have the same size:</p>

<pre>for (int i = 0; i &lt; 5; i++) {
   ColumnConstraints constraints = new ColumnConstraints();
   constraints.setPercentWidth(20); // (there is no constructor that does this)
   gridpane.getColumnConstraints().add(constraints);
}</pre>

<np>If the percentages add up to more than 100, then they will be decreased
proportionately.  In the example, setting all five percentages to be 50 would
have the same effect as setting them all to be 20.
Things can get more complicated than this, but these are probably the most
common cases.</np>

<p>For an example of using a <classname>GridPane</classname> see the
source code of <sourceref href="SimpleColorChooser.java"/> from
<localref href="GUI1.2.1"/>.  You should now be able to read and understand
the entire program.</p>

<break/>

<p>If you would like a grid in which all the rectangles are the
same size, you can use a <classname>TilePane</classname>.  A <classname>TilePane</classname>
arranges equal-size "tiles" in rows and columns.  Each tile holds one of the
child nodes; there is no way to spread out a child over several tiles.</p>

<p>A <classname>TilePane</classname>, <code>tpane</code>, has a preferred number of rows and a preferred
number of columns, which you should set by calling</p>

<pre>tpane.setPrefColumns(cols);</pre>

<np>The preferred number of columns will be used if the <classname>TilePane</classname>
is shown at its preferred size, which is the usual case.  However, that is not necessarily 
true if it is shown at a different size; in that case, the number of columns will be
determined by the width of the available space.  The number of rows
will be determined by the number of child nodes that are added to the <classname>TilePane</classname>.
The children will be laid out in order, filling the first row from left to right, then the
second row, and so on.  It is not required that the last row be completely filled.
(All of this is true if the "orientation" of the <classname>TilePane</classname> is
horizontal.  It is possible to change the orientation to vertical. In that case, the number
of preferred rows is specified instead of the number of columns.  However, I have found little
reason to do that.)</np>

<p>It's very common to have a <classname>TilePane</classname> in which the number of 
preferred columns is one.  In that case, it is similar to a <classname>VBox</classname>.
It is also common for the number of columns to be equal to the number of child nodes,
and in that case, it is similar to an <classname>HBox</classname>.</p>

<p>At its preferred size, the width of each tile is equal to the largest preferred width
of any child node, and similarly for the height.  The <classname>TilePane</classname>
will resize each child to completely fill its tile, except that it will not make
a child larger than its maximum width and height.</p>

<p>There is a <classname>TilePane</classname> constructor with no parameters and one that
takes a list of any number of children to be added to the pane.  You can also
add children later using one of</p>

<pre>tpane.getChildren().add(child);
tpane.getChildren().addAll(child1, child2, ...);</pre>

<p>You can specify the size of a horizontal gap that will be placed between columns and
of a vertical gap that will be placed between rows.  The background of the pane will show
through the gaps.  The gap amounts can be specified in the constructor (optionally 
followed by a list of children):</p>

<pre>TilePane tpane = new TilePane( hgapAmount, vgapAmount );</pre>

<np>or they can be specified later with <code>tpane.setHgap(h)</code> and <code>tpane.setVgap(v)</code>.</np>

<p>For an example that uses <classname>TilePanes</classname> for layout, see
the solution to <localref href="GUI1.ex.7"/>.</p>

</subsection>

</section>