<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE quiz SYSTEM "../csharpnotes1.dtd" >
<quiz>

<question>
<ques><p>Explain what is meant by a <i>recursive</i> subroutine.</p>
</ques>
<ans><p>A recursive subroutine is simply
one that calls itself either directly or through a chain of calls involving
other subroutines.</p>
</ans>
</question>
   
   
<question>
<ques><p>Consider the following subroutine:</p>
<pre>static void printStuff(int level) {
    if (level == 0) {
       System.out.print("*");
    }
    else {
       System.out.print("[");
       printStuff(level - 1);
       System.out.print(",");
       printStuff(level - 1);
       System.out.print("]");
    }
}</pre>
<np>Show the output that would be produced by the subroutine calls
<code>printStuff(0)</code>, <code>printStuff(1)</code>, <code>printStuff(2)</code>, and
<code>printStuff(3)</code>.</np>
</ques>
<ans><p>The outputs are:</p>
<pre>printStuff(0) outputs:   *
printStuff(1) outputs:   [*,*]
printStuff(2) outputs:   [[*,*],[*,*]]
printStuff(3) outputs:   [[[*,*],[*,*]],[[*,*],[*,*]]]</pre>
<p>(Explanation: For <code>printStuff(0)</code>, the value of the parameter is 0,
so the first clause of the <code>if</code> is executed, and the output is just *.
For <code>printStuff(1)</code>, the else clause is executed. This else clause
contains two recursive calls to <code>printStuff(level-1)</code>. Since
<code>level</code> is 1, <code>level-1</code> is 0, so each call to <code>printStuff(0)</code>
outputs a *. The overall output from <code>printStuff(1)</code> is [*,*]. In a
similar way, <code>printStuff(2)</code> includes two recursive calls to
<code>printStuff(1)</code>. Each call to <code>printStuff(1)</code> outputs [*,*]. And
<code>printStuff(2)</code> just takes two copies of this and puts them between [
and ] separated by a comma: [[*,*],[*,*]]. Finally, the output from
<code>printStuff(3)</code> outputs two copies of [[*,*],[*,*]] separated by a comma
and enclosed between brackets. Once you recognize the pattern, you can do
<code>printStuff(N)</code> for any <code>N</code> without trying to follow the
execution of the subroutine in detail.)</p>
</ans>
</question>
   
   
<question>
<ques><p>Suppose that a linked list
is formed from objects that belong to the class</p>
<pre>class ListNode {
   int item;       // An item in the list.
   ListNode next;  // Pointer to next item in the list.
}</pre>
<np>Write a subroutine that will count the number of zeros that occur in a given
linked list of <ptype>ints</ptype>. The subroutine should have a parameter of type <code>ListNode</code>
and should return a value of type <ptype>int</ptype>.</np>
</ques>
<ans><p>I'll give both a non-recursive
solution and a recursive solution. For a linked list, the recursion is not
really necessary, but it does nicely reflect the recursive definition of
<code>ListNode</code></p>
<pre>
static int countZeros( ListNode head ) {
   int count;        // The number of zeros in the list.
   ListNode runner;  // For running along the list.
   count = 0;
   runner = head;    // Start at the beginning of the list.
   while (runner != null) {
      if ( runner.item == 0)
         count++;  // Count the zero found in the current node.
      runner = runner.next;  // Advance to the next node.
   }
   return count;
}

static int countZerosRecursively( ListNode head ) {
   if ( head == null) {
          // An empty list does not contain any zeros.
       return 0;
   }
   else {
       int count = countZerosRecursively( head.next );  // Count zeros in tail.
       if ( head.item == 0 )
           count++;  // Add 1 to account for the zero in the head node.
       return count;
   }
}</pre>
</ans>
</question>

<question>
<ques><p>Let <classname>ListNode</classname> be defined as in the previous
problem.  Suppose that <code>head</code> is a variable of type
<classname>ListNode</classname> that points to the first node in a
linked list.  Write a code segment that will add the number 42 in a new
node at the <b>end</b> of the list.  Assume that the list is not empty.
(There is no "tail pointer" for the list.)</p>
</ques>
<ans>
<pre>ListNode tail;  // Since no tail pointer is given, we need to make one
tail = head;  // We are assuming that this is not null.
while (tail.next != null) {
    tail = tail.next;
}
// At this point, tail points to the last node in the list
ListNode node42;
node42 = new ListNode();  // create a new node
node42.item = 42;    // the item in the new node is 42
tail.next = node42;  // attach the new node to the list
</pre>
<np>(Explanation: To add a list node at the end of the list, we need a pointer to
the last node in the list.  Since no such pointer is given, we have to
make one.  Start with a pointer that is equal to <code>head</code>, and
move it down the list until it points to the last node in the list.
We know that  <code>tail</code> is pointing to the last node in the list if
<code>tail.next</code> is <code>null</code>.  Use a <code>while</code>
loop to move <code>tail</code> down the list until that is true.
Then we can make a new node and attach it to the list by setting
<code>tail.next</code> to point to it.  The value of <code>node42.next</code>
is <code>null</code>, and that <code>null</code> marks the new end of the list.)</np>
</ans>
</question>
   
   
<question>
<ques><p>List nodes can be used to build linked data structures that do not have
the form of linked lists.  Consider the list node class shown on the left and
the code shown on the right:</p>

<pre>class ListNode {                        ListNode one = new ListNode(10);
    int item;                           ListNode two = new ListNode(20);
    ListNode next;                      ListNode three = new ListNode(30);
    Listnode(int i) {                   ListNode four = new ListNode(40);
        item = i;                       one.next = two;
        next = null;                    two.next = three;
    }                                   three.next = four;
}                                       four.next = two;</pre>

<np>Draw the data structure that is constructed by the code.  What happens if
you try to print the items in the data structure using the usual code for
traversing a linked list:</np>
<pre>ListNode runner = one;
while (runner != null) {
    System.out.println(runner.item);
    runner = runner.next();
}</pre>
</ques>
<ans><p>Node one links to node two, node two links to node three, and node three
links to node four.  If <code>four.next</code> were <code>null</code>, the
result would be a normal, four-node linked list.  However, node four links back
to node two:</p>
<img src="looped-list.png" width="374" height="95" alt="a linked data structure with a loop"
            tex="looped-list.eps" texscale="0.8"/>
<np>When the while loop is executed, runner will never become null.  After the
values in the four nodes (10, 20, 30, 40) are printed, the assignment <code>runner = runner.next</code>
will set the runner to point to node two again, so the next number printed is 20.
The program goes into an infinite loop in which the numbers 20, 30, 40 are printed
over and over forever.</np>
</ans>
</question>
   
   
<question>
<ques><p>What are the three operations on a <i>stack?</i></p>
</ques>
<ans><p>The three stack operations are
<i>push</i>, <i>pop,</i> and <i>isEmpty.</i> The definitions of these operations are:
<code>push(item)</code> adds the specified item to the top of the stack;
<code>pop()</code> removes the top item of the stack and returns it; and
<code>isEmpty()</code> is a boolean-valued function that returns true if there are
no items on the stack.</p>
</ans>
</question>
   
   
<question>
<ques><p>What is the basic difference
between a stack and a queue?</p>
</ques>
<ans><p>In a stack, items are added to
the stack and removed from the stack on the same end (called the "top" of the
stack). In a queue, items are added at one end (the "back") and removed at the
other end (the "front"). Because of this difference, a queue is a FIFO
structure (items are removed in the same order in which they were added), and a
stack is a LIFO structure (the item that is popped from a stack is the one that
was added most recently).</p>
</ans>
</question>
   
   
<question>
<ques><p>What is an <i>activation
record</i>? What role does a stack of activation records play in a
computer?</p>
</ques>
<ans><p>When a subroutine is called, an
activation record is created to hold the information that is needed for the
execution of the subroutine, such as the values of the parameters and local
variables. This activation record is stored on a stack of activation records. A
stack is used since one subroutine can call another, which can then call a
third, and so on. Because of this, many activation records can be in use at the
same time. The data structure is a stack because an activation record has to
continue to exist while all the subroutines that are called by the subroutine
are executed. While they are being executed, the stack of activation records
can grow and shrink as subroutines are called and return.</p>
</ans>
</question>
   
   
<question>
<ques><p>Suppose that a binary tree of integers
is formed from objects belonging to the class</p>
<pre>class TreeNode {
   int item;       // One item in the tree.
   TreeNode left;  // Pointer to the left subtree.
   TreeNode right; // Pointer to the right subtree.
}</pre>
<np>Write a recursive subroutine that will find the sum of all the nodes in the
tree. Your subroutine should have a parameter of type <code>TreeNode</code>, and it
should return a value of type <ptype>int</ptype>.</np>
</ques>
<ans>
<pre>static int treeSum( TreeNode root ) {
       // Find the sum of all the nodes in the tree to which root points.
    if ( root == null ) {
          // The sum of the nodes in an empty tree is zero.
       return 0;
    }
    else {
          // Add the item in the root to the sum of the
          // items in the left subtree and the sum of the
          // items in the right subtree.
       int total = root.item;
       total += treeSum( root.left );
       total += treeSum( root.right );
       return total;
    }
 }</pre>
</ans>
</question>

<question>
<ques><p>Let <classname>TreeNode</classname> be the same class as in the previous
problem.  Write a recursive subroutine that makes a copy of a binary tree.
The subroutine has a parameter that points to the root of the tree that is
to be copied.  The return type is <classname>TreeNode</classname>,
and the return value should be a pointer to the root of the copy.
The copy should consist of newly created nodes, and it should have exactly
the same structure as the original tree.
</p>
</ques><ans>
<pre>static TreeNode copyTree( TreeNode root ){
        // Make a copy of the tree that root points to.
    if (root == null) {
        return null;  // The copy of an empty tree is an empty tree
    }
    else {
            // The tree is not empty.  We need to make a new node
            // to be the root of the copy, and then we need to copy
            // the left and right subtrees.
         TreeNode rootOfCopy = new TreeNode();
         rootOfCopy.item = root.item;
         rootOfCopy.left = copyTree( root.left );
         rootOfCopy.right = copyTree( root.right );
         return rootOfCopy;
    }
}</pre>
<np>(The essential point here is that the subtrees of the original tree
can be copied using recursive calls to <code>copyTree()</code>.  For example,
<code>copyTree(root.left)</code> will make a complete copy of the left
subtree of the original tree, and that can become the left subtree of
the new root node.  This works even if <code>root.left</code> is <code>null</code>.)</np>
</ans>
</question>
   
   
<question>
<ques><p>What is a <i>postorder traversal</i> of a binary tree?</p>
</ques>
<ans><p>In a traversal of a binary tree,
all the nodes are processed in some way. (For example, they might be printed.)
In a postorder traversal, the order of processing is defined by the rule: For
each node, the nodes in the left subtree of that node are processed first. Then
the nodes in the right subtree are processed. Finally, the node itself is
processed.  This rule is applied at all levels of the tree.</p>
</ans>
</question>
   
<question>
<ques><p>Suppose that a binary sort tree of integers is initially empty and
that the following integers are inserted into the tree in the order shown:</p>
<pre>5   7   1   3   4   2   6</pre>
<np>Draw the binary sort tree that results.  Then list the integers in the
order that is produced by a post-order traversal of the tree.</np>
</ques>
<ans><p>This picture shows the tree that results after each integer
has been inserted, using the <code>treeInsert()</code> method from
<localref href="recursion.4.2"/>:</p>
<img src="build-bst.png" width="381" height="265" alt="inserting integers into a binary sort tree" 
           texscale="0.8" tex="build-bst.eps"/>
<np>In a post-order traversal, the nodes in the left subtree are processed first, then
the nodes in the right subtree, then the root node.  For this tree, the nodes are processed
in the order:</np>
<pre>2   4   3   1   6   7   5</pre>
<np>(Of course, an in-order traversal would process the nodes in sorted order: 1, 2, 3, 4, 5, 6, 7.)</np>
</ans>
</question>
   
<question>
<ques><p>Suppose that a <code>&lt;multilist&gt;</code> is defined by the BNF rule</p>
<pre>&lt;multilist&gt;  ::=  &lt;word&gt;  |  "(" [ &lt;multilist&gt; ]... ")"</pre>
<np>where a <code>&lt;word&gt;</code> can be any sequence of letters. Give five
different <code>&lt;multilist&gt;'s</code> that can be generated by this rule.
(This rule, by the way, is almost the entire syntax of the programming language
<code>LISP</code>! <code>LISP</code> is known for its simple syntax and its elegant and
powerful semantics.)</np>
</ques>
<ans><p>Here are five possibilities (out
of an infinite number of possibilities), with some explanation:</p>
<pre>fred &mdash; A &lt;multilist&gt; can just be a word, such as "fred".
          
( )  &mdash; The [ ]... around &lt;multilist&gt; means that there can be
          any number of nested &lt;multilist&gt;'s, including zero.  If
          there are zero, then all that's left is the empty
          parentheses.
          
( fred mary chicago )&mdash;A &lt;multilist&gt; consisting of three
                         &lt;multilist&gt;'s&mdash;"fred", "mary", and
                         "chicago"&mdash;inside parentheses
                         
( ( able ) ( baker charlie ) )&mdash;A &lt;multilist&gt; containing two
                                  &lt;multilist&gt;'s.
                                  
( ( a ( b ) ) ( c ( d e ) g ) ) &mdash;Even more nesting.</pre>
</ans>
</question>
   
   
<question>
<ques><p>Explain what is meant by <i>parsing</i> a computer program.</p>
</ques>
<ans><p>To parse a computer program
means to determine its syntactic structure, that is, to figure out how it can
be constructed using the rules of a grammar (such as a BNF grammar).</p>
</ans>
</question>
   
</quiz>