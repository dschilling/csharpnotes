<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section SYSTEM "../csharpnotes1.dtd" >

<section id="control.6" title="The switch Statement">
   
<p><start><big>T</big>he second branching statement</start> in Java is the
<code>switch</code> statement, which is introduced in this section. The
<code>switch</code> statement is used much less often than the <code>if</code> statement, but it
is sometimes useful for expressing a certain type of multiway branch.</p>

   
<subsection id="control.6.1" title="The Basic switch Statement">

<p>A switch statement allows you to test the value of an expression and,
depending on that value, to jump directly to some location within the switch statement.
Only expressions of certain types can be used.  The value of the expression
can be one of the primitive integer types <ptype>int</ptype>,
<ptype>short</ptype>, or <ptype>byte</ptype>.
It can be the primitive <ptype>char</ptype> type.  
It can be <classname>String</classname>.
Or it can be an enum type (see <localref href="basics.3.4"/> for an introduction to enum types).  
In particular, note that the expression <b>cannot</b> be a <ptype>double</ptype> or 
<ptype>float</ptype> value.  </p>

<p>Java has two different syntaxes for <code>switch</code> statements.  The original switch syntax,
which like other Java control structures
was modeled on the C&nbsp;programming language, is error-prone and kind-of ugly.
The new syntax, which requires Java&nbsp;17, is an improvement.  You still need to know 
the traditional syntax, since it is used in a lot of existing code, but my advice would
be to use the new syntax when you write new code.  We look at the new syntax first, and will
cover the traditional syntax at the end of this section.</p>

<p>The positions within a switch statement to which it
can jump are marked with <newword>case labels</newword> that take the form: 
"case&nbsp;<bnf>constantList</bnf>".  The <bnf>constantList</bnf> here consists
of one or more literals of the same type as the expression in the <code>switch</code>,
separated by commas.  For example:</p> 

<pre>       case 2, 4, 8
or 
       case "Paper"</pre> 

<np>The case label is followed by <code>-&gt;</code>, that is by a symbol made up
of a hyphen and a greater-than character, and then by a single statement.
The statement can be a subroutine call statement, a <code>throw</code> statement,
or a block statement, containing several nested statements.
A switch statement can also, optionally, have one jump point labeled with <code>default</code>
instead of with a case label.  The syntax for the statement can be specified as follows,
noting that there can be at most one <code>default</code> case and that all the constants
in the case labels must be different:</np>

<pre>switch ( <bnf>expression</bnf> ) {
    <bnf>case-label-or-default</bnf> -&gt; <bnf>statement</bnf> 
    <bnf>case-label-or-default</bnf> -&gt; <bnf>statement</bnf> 
        .
        .
        .
    <bnf>case-label-or-default</bnf> -&gt; <bnf>statement</bnf>
}</pre>

<np>When the computer executes this <code>switch</code> statement, it evaluates the <bnf>expression</bnf>.
If the value is one of the constants in a case label, the computer executes
the statement that follows that case label, and then jumps out of the <code>switch</code> statement.
If the value of the expression does not match any of the case constants, then the
computer looks for a <code>default</code> case, and if one is present, executes the
statement that follows it.</np>

<p>It is probably easiest to look at an example.   This is not a useful example, but
it should be easy to follow:</p>

<pre>switch ( N ) {   // (Assume N is an integer variable.)
   case 1 -> System.out.println("The number is 1.");
   case 2, 4, 8 -> {
      System.out.println("The number is 2, 4, or 8.");
      System.out.println("(That's a power of 2!)");
   }
   case 3, 6, 9 -> {
      System.out.println("The number is 3, 6, or 9.");
      System.out.println("(That's a multiple of 3!)");
   }
   case 5 -> System.out.println("The number is 5.");
   default ->
      System.out.println("The number is 7 or is outside the range 1 to 9.");
}</pre>

<np>The braces, <code>{</code> and <code>}</code>, in this example are required to group
multiple statements into a single block statement.  Braces could also be
added to the other cases, but are not required there.
This <code>switch</code> statement has exactly the same effect as the
following multiway if statement:</np>

<pre>if ( N == 1 ) {
    System.out.println("The number is 1.");
}
else if ( N == 2 || N == 4 || N == 8 ) {
    System.out.println("The number is 2, 4, or 8.");
    System.out.println("(That's a power of 2!)");
}
else if ( N == 3 || N == 6 || N == 9 ) {
    System.out.println("The number is 3, 6, or 9.");
    System.out.println("(That's a multiple of 3!)");
}
else if ( N == 5 ) {
    System.out.println("The number is 5.");
}
else {
    System.out.println("The number is 7 or is outside the range 1 to 9.");
}</pre>

<np>More generally, any <code>switch</code> statement could be replaced by a
multiway if statement.  The <code>switch</code> statement can be easier to read.
And it might be more efficient since the computer can jump directly
to the correct case instead of working through a series of tests to get to
the correct case.</np>

   
</subsection>

<subsection id="control.6.2" title="Menus and switch Statements">

<p>One application of <code>switch</code> statements is in processing menus. A menu
is a list of options. The user selects one of the options. The computer has to
respond to each possible choice in a different way. If the options are numbered
1, 2,&nbsp;&dots;, then the number of the chosen option can be used in a
<code>switch</code> statement to select the proper response.</p>

<p>In a command-line program, the menu can be presented as a numbered
list of options, and the user can choose an option by typing in its number.
It can be convenient to use a text block (see <localref href="basics.3.3a"/>) to present the menu.
Here is an example that could be used in a variation of the
<code>LengthConverter</code> example from the <localref href="control.5">previous
section</localref>:</p>

<pre>int optionNumber;   // Option number from menu, selected by user.
double measurement; // A numerical measurement, input by the user.
                    //    The unit of measurement depends on which
                    //    option the user has selected.
double inches;      // The same measurement, converted into inches.

/* Display menu of options, and get user's selected option number. */

System.out.println("""
        What unit of measurement does your input use?
        
                1. inches
                2. feet
                3. yards
                4. miles
                
        Enter the number of your choice:
        """);

optionNumber = TextIO.getlnInt();

/* Read user's measurement and convert to inches. */

switch ( optionNumber ) {
   case 1 -> {
       System.out.println("Enter the number of inches: ");
       measurement = TextIO.getlnDouble();
       inches = measurement;
   }
   case 2 -> {
       System.out.println("Enter the number of feet: ");
       measurement = TextIO.getlnDouble();
       inches = measurement * 12;
   }
   case 3 -> {
       System.out.println("Enter the number of yards: ");
       measurement = TextIO.getlnDouble();
       inches = measurement * 36;
   }
   case 4 -> {
       System.out.println("Enter the number of miles: ");
       measurement = TextIO.getlnDouble();
       inches = measurement * 12 * 5280;
    }
   default -> {
       System.out.println("Error!  Illegal option number!  I quit!");
       System.exit(1);
   }

} // end switch

/* Now go on to convert inches to feet, yards, and miles... */</pre>

<np>Alternatively, this example could be designed to ask the use to enter
the unit of measure as a string, instead of as an option number, and then 
use that string directly in a <code>switch</code> statement:</np>

<pre>String units;       // Unit of measurement, entered by user.
double measurement; // A numerical measurement, input by the user.
double inches;      // The same measurement, converted into inches.

/* Read the user's unit of measurement. */

System.out.println("What unit of measurement does your input use?");
units = TextIO.getln().toLowerCase();

/* Read user's measurement and convert to inches. */

System.out.print("Enter the number of " + units + ":  ");
measurement = TextIO.getlnDouble();

switch ( units ) {
   case "inch", "inches", "in" ->  inches = measurement;
   case "foot", "feet", "ft"   ->  inches = measurement * 12;
   case "yard", "yards", "yd"  ->  inches = measurement * 36;
   case "mile", "miles", "mi"  ->  inches = measurement * 12 * 5280;
   default -> {
       System.out.println("Wait a minute!  Illegal unit of measure!  I quit!");
       System.exit(1);
   }
} // end switch</pre>

   
</subsection>

<subsection id="control.6.3" title="Enums in switch Statements">
   
<p>The type of the expression in a <code>switch</code> can be an enum
type.  In that case, the constants in the <code>case</code> labels must
be values from the enum type.  For example, suppose that the type of
the expression is the enumerated type <classname>Season</classname>
defined by</p>

<pre>enum Season { SPRING, SUMMER, FALL, WINTER }</pre>

<np>and that the expression in a <code>switch</code> statement is an expression
of type <classname>Season</classname>.  The constants in the case label must be chosen from among
the values <code>Season.SPRING</code>, <code>Season.SUMMER</code>, <code>Season.FALL</code>, or
<code>Season.WINTER</code>.  However, there is a quirk in the syntax:
when an enum  constant is used in a <code>case</code> label, only the simple name,
such as "<code>SPRING</code>" is used, not the full name, such as "<code>Season.SPRING</code>".
Of course, the computer already knows that the value in the <code>case</code> label
must belong to the enumerated type, since it can tell that from the type of expression
used, so there is really no need to specify the type name in the constant.  For example,
assuming that <code>currentSeason</code> is a variable of type <classname>Season</classname>,
then we could have the <code>switch</code> statement:</np>
  
<pre>System.out.print("The months in " + currentSeason + " are: ");

switch ( currentSeason ) {
   case WINTER ->   // ( NOT Season.WINTER ! )
      System.out.println("December, January, February");
   case SPRING ->
      System.out.println("March, April, May");
   case SUMMER ->
      System.out.println("June, July, August");
   case FALL ->
      System.out.println("September, October, November");
}</pre>
</subsection>



<subsection id="control.6.4" title="Definite Assignment and switch Statements">
   
<p>As a somewhat more realistic example, the following <code>switch</code> statement
makes a random choice among three possible alternatives.  Recall that the
value of the expression <code>(int)(3*Math.random())</code> is one of the
integers 0, 1, or 2, selected at random with equal probability, so the
<code>switch</code> statement below will assign one of the values
<code>"Rock"</code>, <code>"Paper"</code>, <code>"Scissors"</code> to <code>computerMove</code>,
with probability 1/3 for each case:</p>

<pre>switch ( (int)(3*Math.random()) ) {
   case 0 -> computerMove = "Rock";
   case 1 -> computerMove = "Paper";
   case 2 -> computerMove = "Scissors";
}</pre>

<np>This <code>switch</code> statement is perfectly OK, but suppose that we use it in the
following code segment:</np>
   
<pre><newcode>String computerMove;</newcode>
switch ( (int)(3*Math.random()) ) {
   case 0 -> computerMove = "Rock";
   case 1 -> computerMove = "Paper";
   case 2 -> computerMove = "Scissors";
}
<newcode>System.out.println("The computer's move is " + computerMove);</newcode>  // ERROR!</pre>

<np>Now there is a subtle error on the last line!  The problem here is due to
definite assignment, the idea that the Java compiler must be able to determine
that a variable has definitely been assigned a value before its value is used.
Definite assignment was introduced in <localref href="control.1.4"/>.
In this example, it's true that the three cases in the <code>switch</code>
cover all the possibilities, but the compiler is not smart enough to figure
that out; it just sees that there is an integer-valued expression in the <code>switch</code>
but not all possible integer values are covered by the given cases.
</np>

<p>A simple solution is to replace the final <code>case</code> in the <code>switch</code>
statement with <code>default</code>.  With a <code>default</code> case, all
possible values of the expression in the <code>switch</code> are certainly covered,
and the compiler knows that <code>computerMove</code> is definitely assigned
a value:</p>

<pre>String computerMove;
switch ( (int)(3*Math.random()) ) {
   case 0 -> computerMove = "Rock";
   case 1 -> computerMove = "Paper";
   <newcode>default</newcode> -> computerMove = "Scissors";
}
System.out.println("The computer's move is " + computerMove);  // OK!</pre>


</subsection>

<subsection id="control.6.5" title="Switch Expressions">

<p>Often, the whole purpose of a <code>switch</code> statement
is to assign a value to a variable, where the value that is to be
assigned depends on the value of the expression in the <code>switch</code>
statement.  For example, this is true for the <code>switch</code> statement
in the previous subsection.</p>

<p>This type of thing can be handled more elegantly by using a <newword>switch expression</newword>
instead of a <code>switch</code> statement.  Like any
expression, a <code>switch</code> expression computes and returns a single value.
The syntax is similar to a <code>switch</code> statement, but instead of a statement
in each <code>case</code>, there is an expression (or a <code>throw</code> statement).  For example,</p>

<pre>String computerMove = switch ( (int)(3*Math.random()) ) {
        case 1 -> "Rock";
        case 2 -> "Paper";
        default -> "Scissors";
    };</pre>

<np>This is a single assignment statement, where the value to be
assigned to <code>computerMove</code> is computed by the <code>switch</code>
expression.  The semicolon on the last line is the semicolon that is required
at the end of the assignment statement; it is not part of the <code>switch</code>
expression.</np>

<p>A <code>switch</code> expression must always compute a value (or throw an exception) and therefore
will usually have a <code>default</code> case.
The expression in a <code>case</code>
can be replaced by a block containing several statements; the value for that <code>case</code>
should then be specified by a <code>yield</code> statement, which takes a form
such as "<code>yield&nbsp;42;</code>".  The value after the word <code>yield</code> is
then returned as the value of the <code>switch</code> expression.</p>

<p>Of course, <code>switch</code> expressions are not limited to assignment statements.
You can use a <code>switch</code> expression any place where any other kind of expression
could be used, such as in an output statement or as part of a larger expression.</p>

</subsection>

<subsection id="control.6.6" title="The Traditional switch Statement">

<p>The older traditional syntax for <code>switch</code> statements is more complicated,
but you should be aware of it since it has been widely used in Java and in other
programming languages. As it is most often used, the traditional <code>switch</code>
has the form:</p>

<pre>switch (<bnf>expression</bnf>) {
   case <bnf>constant-1</bnf>:
      <bnf>statements-1</bnf>
      break;
   case <bnf>constant-2</bnf>:
      <bnf>statements-2</bnf>
      break;
      .
      .   // (more cases)
      .
   case <bnf>constant-N</bnf>:
      <bnf>statements-N</bnf>
      break;
   default:  // optional default case
      <bnf>statements-(N+1)</bnf>
} // end of switch statement</pre>


<np>Note that in the traditional syntax, only one constant is allowed in a case label
(but Java&nbsp;17 allows a comma-separated list of constants here). 
A case label can be followed by any number of statements.  This traditional syntax uses a colon
after each case label, rather than <code>-&gt;</code>.  The <code>default</code> case
is optional.</np>
  
<p>To execute this <code>switch</code> statement, the computer will evaluate
the <bnf>expression</bnf> and jump to the case label that contains that constant, 
if there is one, or to the default case if not.
The <code>break</code> statements in this <code>switch</code> are not actually
required by the syntax of the <code>switch</code> statement. The effect of a
<code>break</code> is to make the computer jump past the end of the switch statement,
skipping over all the remaining cases.
If you leave out the break statement, the computer will just forge ahead after
completing one case and will execute the statements associated with the next
case label. This is called "fall through"; it is rarely what you want, and
it is a common source of bugs. However, it is legal and is even occasionally useful.</p>

<p>Note that you can leave out one of the groups of statements entirely
(including the <code>break</code>). You then have two case labels in a row,
containing two different constants. This just means that the computer will jump
to the same place and perform the same action for each of the two
constants.</p>

<p>Here is how our first example <code>switch</code> statement would
be written using the traditional syntax:</p>

<pre>switch ( N ) {   // (Assume N is an integer variable.)
   case 1:
      System.out.println("The number is 1.");
      break;
   case 2:
   case 4:
   case 8:
      System.out.println("The number is 2, 4, or 8.");
      System.out.println("(That's a power of 2!)");
      break;
   case 3:
   case 6:
   case 9:
      System.out.println("The number is 3, 6, or 9.");
      System.out.println("(That's a multiple of 3!)");
      break;
   case 5:
      System.out.println("The number is 5.");
      break;
   default:
      System.out.println("The number is 7 or is outside the range 1 to 9.");
}</pre>
   
</subsection>

   
</section>